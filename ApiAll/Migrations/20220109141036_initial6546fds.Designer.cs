// <auto-generated />
using System;
using System.Collections.Generic;
using ApiAll.Contex;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ApiAll.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220109141036_initial6546fds")]
    partial class initial6546fds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

            modelBuilder.Entity("ApiAll.Model.AnalizAgglyutinatsionTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ACOstr")
                        .HasColumnType("text");

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("CPRstr")
                        .HasColumnType("text");

                    b.Property<string>("PFstr")
                        .HasColumnType("text");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("AnalizAgglyutinatsionTest");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizBakterioskopiya", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<string>("bakterios")
                        .HasColumnType("text");

                    b.Property<string>("epitkletka")
                        .HasColumnType("text");

                    b.Property<string>("gardnerelez")
                        .HasColumnType("text");

                    b.Property<string>("gonokokki")
                        .HasColumnType("text");

                    b.Property<string>("gribok")
                        .HasColumnType("text");

                    b.Property<string>("leykosit")
                        .HasColumnType("text");

                    b.Property<string>("mikflora")
                        .HasColumnType("text");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("trixomonad")
                        .HasColumnType("text");

                    b.Property<string>("ureplazma")
                        .HasColumnType("text");

                    b.Property<string>("vposeve")
                        .HasColumnType("text");

                    b.Property<string>("xlamidoz")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("analizBakterioskopiyas");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizCovid", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<string>("lgGstr")
                        .HasColumnType("text");

                    b.Property<string>("lgMstr")
                        .HasColumnType("text");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("AnalizCovid");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizCovidMazok", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("AntigenTest")
                        .HasColumnType("text");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("AnalizCovidMazok");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizDemodex", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("result")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("analizDemodices");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizKala", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<string>("count")
                        .HasColumnType("text");

                    b.Property<string>("konsistensiya")
                        .HasColumnType("text");

                    b.Property<string>("ovqat_qoldiqlari")
                        .HasColumnType("text");

                    b.Property<string>("qon")
                        .HasColumnType("text");

                    b.Property<string>("rang")
                        .HasColumnType("text");

                    b.Property<string>("reaksiya")
                        .HasColumnType("text");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("shakli")
                        .HasColumnType("text");

                    b.Property<string>("sliz")
                        .HasColumnType("text");

                    b.Property<string>("xid")
                        .HasColumnType("text");

                    b.Property<string>("yiring")
                        .HasColumnType("text");

                    b.Property<string>("zichlik")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("analizKalas");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizLeyshmaniy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("result")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("analizLeyshmaniys");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizLk", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("result")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("analizLks");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizMachi", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<string>("bakteriya")
                        .HasColumnType("text");

                    b.Property<string>("bilurbin")
                        .HasColumnType("text");

                    b.Property<string>("buyrak")
                        .HasColumnType("text");

                    b.Property<string>("donador")
                        .HasColumnType("text");

                    b.Property<string>("epiteliol")
                        .HasColumnType("text");

                    b.Property<string>("eritrosit_sl")
                        .HasColumnType("text");

                    b.Property<string>("gialin")
                        .HasColumnType("text");

                    b.Property<string>("glyukoza")
                        .HasColumnType("text");

                    b.Property<string>("indikan")
                        .HasColumnType("text");

                    b.Property<string>("keton")
                        .HasColumnType("text");

                    b.Property<string>("leykosit")
                        .HasColumnType("text");

                    b.Property<string>("leykosit_sl")
                        .HasColumnType("text");

                    b.Property<string>("miqdori")
                        .HasColumnType("text");

                    b.Property<string>("mumsimon")
                        .HasColumnType("text");

                    b.Property<string>("nis_zichligi")
                        .HasColumnType("text");

                    b.Property<string>("oqsil")
                        .HasColumnType("text");

                    b.Property<string>("ozgargan")
                        .HasColumnType("text");

                    b.Property<string>("ozgarmagan")
                        .HasColumnType("text");

                    b.Property<string>("pigmentli")
                        .HasColumnType("text");

                    b.Property<string>("qon_ba")
                        .HasColumnType("text");

                    b.Property<string>("rangi")
                        .HasColumnType("text");

                    b.Property<string>("reaksiyasi")
                        .HasColumnType("text");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("shilliq")
                        .HasColumnType("text");

                    b.Property<string>("tiniqligi")
                        .HasColumnType("text");

                    b.Property<string>("tuzlar")
                        .HasColumnType("text");

                    b.Property<string>("urobil")
                        .HasColumnType("text");

                    b.Property<string>("ut_kislot")
                        .HasColumnType("text");

                    b.Property<string>("utuvchi")
                        .HasColumnType("text");

                    b.Property<string>("yassi")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("analizMachis");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizMikroskopiya", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<string>("deytrit")
                        .HasColumnType("text");

                    b.Property<string>("epiteliy")
                        .HasColumnType("text");

                    b.Property<string>("eritrosit")
                        .HasColumnType("text");

                    b.Property<string>("jir_kislota")
                        .HasColumnType("text");

                    b.Property<string>("kletachka")
                        .HasColumnType("text");

                    b.Property<string>("kraxmal")
                        .HasColumnType("text");

                    b.Property<string>("leykosit")
                        .HasColumnType("text");

                    b.Property<string>("mila")
                        .HasColumnType("text");

                    b.Property<string>("mish_volokna")
                        .HasColumnType("text");

                    b.Property<string>("prosteyshiy")
                        .HasColumnType("text");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("soed_tkan")
                        .HasColumnType("text");

                    b.Property<string>("yaglist")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("analizMikroskopiyas");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizMuhimbelgilar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("result")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("analizMuhimbelgilars");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizQondagiGarmonlar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("FSGstr")
                        .HasColumnType("text");

                    b.Property<string>("LGstr")
                        .HasColumnType("text");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProlaktinStr")
                        .HasColumnType("text");

                    b.Property<string>("T3str")
                        .HasColumnType("text");

                    b.Property<string>("T4str")
                        .HasColumnType("text");

                    b.Property<string>("TTGstr")
                        .HasColumnType("text");

                    b.Property<string>("TestestronStr")
                        .HasColumnType("text");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("AnalizQondagiGarmonlar");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizQontahlili", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<string>("anizotsitoz")
                        .HasColumnType("text");

                    b.Property<string>("bazofil")
                        .HasColumnType("text");

                    b.Property<string>("bazofil_donador")
                        .HasColumnType("text");

                    b.Property<string>("eozinofil")
                        .HasColumnType("text");

                    b.Property<string>("eritro_normoblast")
                        .HasColumnType("text");

                    b.Property<string>("eritrosit")
                        .HasColumnType("text");

                    b.Property<string>("eritrosit_chokish_tezligi")
                        .HasColumnType("text");

                    b.Property<string>("gem_miqdori")
                        .HasColumnType("text");

                    b.Property<string>("gemoglobin")
                        .HasColumnType("text");

                    b.Property<string>("kebot_xalqa")
                        .HasColumnType("text");

                    b.Property<string>("leykosit")
                        .HasColumnType("text");

                    b.Property<string>("limfosit")
                        .HasColumnType("text");

                    b.Property<string>("megaloblast")
                        .HasColumnType("text");

                    b.Property<string>("metamielosit")
                        .HasColumnType("text");

                    b.Property<string>("mielosit")
                        .HasColumnType("text");

                    b.Property<string>("monosit")
                        .HasColumnType("text");

                    b.Property<string>("plazmatik_xujayra")
                        .HasColumnType("text");

                    b.Property<string>("polixromafiliya")
                        .HasColumnType("text");

                    b.Property<string>("poykilositoz")
                        .HasColumnType("text");

                    b.Property<string>("rangli_korsatkich")
                        .HasColumnType("text");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("retikulositlar")
                        .HasColumnType("text");

                    b.Property<string>("sigmentyadrolilar")
                        .HasColumnType("text");

                    b.Property<string>("taksogen_donadorlik")
                        .HasColumnType("text");

                    b.Property<string>("tayoqcha_yadrolilar")
                        .HasColumnType("text");

                    b.Property<string>("trombosit")
                        .HasColumnType("text");

                    b.Property<string>("yadro_gipersigmentatsiyasi")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("analizQontahlilis");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizRw", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("analizRws");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizSarcoptes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("analizSarcoptes");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizZamburug", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.ToTable("analizZamburugs");
                });

            modelBuilder.Entity("ApiAll.Model.Authorization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UsersId");

                    b.ToTable("authorizations");
                });

            modelBuilder.Entity("ApiAll.Model.Color", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("line")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("colors");
                });

            modelBuilder.Entity("ApiAll.Model.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("client")
                        .HasColumnType("boolean");

                    b.Property<bool>("maincompany")
                        .HasColumnType("boolean");

                    b.Property<bool>("supplier")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("ApiAll.Model.Contragent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<long?>("DistrictsId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<long?>("chatBotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("client")
                        .HasColumnType("boolean");

                    b.Property<bool>("maincompany")
                        .HasColumnType("boolean");

                    b.Property<bool>("supplier")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DistrictsId");

                    b.ToTable("contragents");
                });

            modelBuilder.Entity("ApiAll.Model.ContragentAdditionalPaymentBefohand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContragentId")
                        .HasColumnType("bigint");

                    b.Property<string>("PayedUserInfo")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("noteStr")
                        .HasColumnType("text");

                    b.Property<double>("summa")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ContragentId");

                    b.ToTable("ContragentAdditionalPaymentBefohand");
                });

            modelBuilder.Entity("ApiAll.Model.ContragentAdditionalPaymentBefohandDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("ContragentId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("limitSummLeft")
                        .HasColumnType("double precision");

                    b.Property<double>("summa")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ContragentId");

                    b.HasIndex("PatientsId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ContragentAdditionalPaymentBefohandDetail");
                });

            modelBuilder.Entity("ApiAll.Model.ContragentAdditionalPaymentBefohandFullInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("ContragentId")
                        .HasColumnType("bigint");

                    b.Property<double>("qtySumm")
                        .HasColumnType("double precision");

                    b.Property<double>("realQty")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ContragentId");

                    b.ToTable("ContragentAdditionalPaymentBefohandFullInfo");
                });

            modelBuilder.Entity("ApiAll.Model.ContragentServiceTypeBonusAdditanaly", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("ContragentId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<double>("bonusSumm")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ContragentId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ContragentServiceTypeBonusAdditanaly");
                });

            modelBuilder.Entity("ApiAll.Model.CustomContragentReport", b =>
                {
                    b.Property<long>("contragentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("datereg")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("fio")
                        .HasColumnType("text");

                    b.Property<long>("mrt")
                        .HasColumnType("bigint");

                    b.Property<long>("mskt")
                        .HasColumnType("bigint");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<string>("regionName")
                        .HasColumnType("text");

                    b.Property<double>("sum")
                        .HasColumnType("double precision");

                    b.ToTable("customContragentReports");
                });

            modelBuilder.Entity("ApiAll.Model.Datchik", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<double>("max")
                        .HasColumnType("double precision");

                    b.Property<double>("min")
                        .HasColumnType("double precision");

                    b.Property<string>("model")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<string>("serialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("datchiks");
                });

            modelBuilder.Entity("ApiAll.Model.DatchikItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("ColorId")
                        .HasColumnType("bigint");

                    b.Property<long>("DatchikId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoomsId")
                        .HasColumnType("bigint");

                    b.Property<int>("order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("DatchikId");

                    b.HasIndex("RoomsId");

                    b.ToTable("datchikItems");
                });

            modelBuilder.Entity("ApiAll.Model.DatchikRealValues", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CurrentDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("RoomsId")
                        .HasColumnType("bigint");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomsId");

                    b.ToTable("datchikRealValues");
                });

            modelBuilder.Entity("ApiAll.Model.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("ApiAll.Model.Districts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("ApiAll.Model.FIleChecker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("imageUrl")
                        .HasColumnType("text");

                    b.Property<string>("src")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FIleChecker");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalContragentDebitPaymentReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("contragentAddress")
                        .HasColumnType("text");

                    b.Property<long?>("contragentId")
                        .HasColumnType("bigint");

                    b.Property<string>("contragentName")
                        .HasColumnType("text");

                    b.Property<string>("contragentPhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("date");

                    b.Property<long>("districtsId")
                        .HasColumnType("bigint");

                    b.Property<bool>("paymentPayedStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("regionName")
                        .HasColumnType("text");

                    b.Property<string>("serviceGroupName")
                        .HasColumnType("text");

                    b.Property<string>("serviceTypeName")
                        .HasColumnType("text");

                    b.Property<double?>("summa")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("contragentId");

                    b.HasIndex("districtsId");

                    b.ToTable("HospitalContragentDebitPaymentReport");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalContragentNotifierReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("ContragentId")
                        .HasColumnType("bigint");

                    b.Property<int>("notActiveDays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContragentId");

                    b.ToTable("HospitalContragentNotifierReport");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalDailyKassirReport", b =>
                {
                    b.Property<double?>("naqt")
                        .HasColumnType("double precision");

                    b.Property<double?>("plastik")
                        .HasColumnType("double precision");

                    b.Property<double?>("rasxod")
                        .HasColumnType("double precision");

                    b.ToTable("HospitalDailyKassirReport");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalFullInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("hospitalContacInfoStr")
                        .HasColumnType("text");

                    b.Property<string>("hospitalServiceInfo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HospitalFullInfo");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalManagerReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("HospitalServiceTypeGroupName")
                        .HasColumnType("text");

                    b.Property<double>("cardSumm")
                        .HasColumnType("double precision");

                    b.Property<double>("cashSumm")
                        .HasColumnType("double precision");

                    b.Property<long>("count")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdDateTime")
                        .HasColumnType("date");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.ToTable("HospitalManagerReport");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalMrtSorovNoma", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("ContragentId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<bool>("breketlar")
                        .HasColumnType("boolean");

                    b.Property<string>("contragentName")
                        .HasColumnType("text");

                    b.Property<string>("contragentPhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("dateOfBirthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("eshitishAparatiImplanti")
                        .HasColumnType("boolean");

                    b.Property<bool>("insulinliPompa")
                        .HasColumnType("boolean");

                    b.Property<string>("jarohatOlganmisz")
                        .HasColumnType("text");

                    b.Property<bool>("kardioSimulator")
                        .HasColumnType("boolean");

                    b.Property<bool>("kozdagiYotMetal")
                        .HasColumnType("boolean");

                    b.Property<bool>("neyrosimulator")
                        .HasColumnType("boolean");

                    b.Property<bool>("nurTerapiya")
                        .HasColumnType("boolean");

                    b.Property<string>("patientFio")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("protezlar")
                        .HasColumnType("boolean");

                    b.Property<bool>("qontomirStentlari")
                        .HasColumnType("boolean");

                    b.Property<string>("shikoyatlaringz")
                        .HasColumnType("text");

                    b.Property<double>("summa")
                        .HasColumnType("double precision");

                    b.Property<string>("tekshiriladigonAzolar")
                        .HasColumnType("text");

                    b.Property<bool>("tutqonoqOtkazganmisz")
                        .HasColumnType("boolean");

                    b.Property<bool>("umurtqaPogonasidaMetalFixsator")
                        .HasColumnType("boolean");

                    b.Property<bool>("ximiyaTerapiya")
                        .HasColumnType("boolean");

                    b.Property<bool>("xomiladorlikUchOyligi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ContragentId");

                    b.HasIndex("PatientsId");

                    b.ToTable("HospitalMrtSorovNoma");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalRegistrationPermissionDoctors", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("doctorAuthId")
                        .HasColumnType("bigint");

                    b.Property<long>("registraterAuthId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("doctorAuthId");

                    b.HasIndex("registraterAuthId");

                    b.ToTable("HospitalRegistrationPermissionDoctors");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalServiceRecipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("MarketProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MarketProductId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("HospitalServiceRecipe");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalServiceTypeByGroupPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("HospitalServiceTypeGroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("withoutReturnStatus")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("HospitalServiceTypeGroupId");

                    b.ToTable("HospitalServiceTypeByGroupPermission");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalServiceTypeGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HospitalServiceTypeGroup");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalServiceTypeGroupContragentReports", b =>
                {
                    b.Property<string>("groupnomi")
                        .HasColumnType("text");

                    b.Property<double?>("naqt")
                        .HasColumnType("double precision");

                    b.Property<double?>("plastik")
                        .HasColumnType("double precision");

                    b.Property<long?>("soni")
                        .HasColumnType("bigint");

                    b.Property<string>("tumannomi")
                        .HasColumnType("text");

                    b.Property<DateTime>("vaqti")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("vrachnomi")
                        .HasColumnType("text");

                    b.Property<double?>("vrachxizmati")
                        .HasColumnType("double precision");

                    b.ToTable("HospitalServiceTypeGroupContragentReports");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalTelegramBotManager", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("messageStr")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HospitalTelegramBotManager");
                });

            modelBuilder.Entity("ApiAll.Model.HospitelRequiredServiceTypesAllPatcientsAndNotPatcients", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("HospitelRequiredServiceTypesAllPatcientsAndNotPatcients");
                });

            modelBuilder.Entity("ApiAll.Model.Ilness", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ilnesses");
                });

            modelBuilder.Entity("ApiAll.Model.MarketLimitCustomItem", b =>
                {
                    b.Property<long?>("auth_id")
                        .HasColumnType("bigint");

                    b.Property<string>("auth_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("begin_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("byProduct")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("id")
                        .HasColumnType("bigint");

                    b.Property<bool?>("limitFinished")
                        .HasColumnType("boolean");

                    b.Property<double?>("limit_qty")
                        .HasColumnType("double precision");

                    b.Property<long?>("product_id")
                        .HasColumnType("bigint");

                    b.Property<string>("product_name")
                        .HasColumnType("text");

                    b.Property<double?>("realSumm")
                        .HasColumnType("double precision");

                    b.Property<double?>("real_qty")
                        .HasColumnType("double precision");

                    b.Property<double?>("reservedSumm")
                        .HasColumnType("double precision");

                    b.ToTable("MarketLimitCustomItem");
                });

            modelBuilder.Entity("ApiAll.Model.MarketOrderFullOrderedProducts", b =>
                {
                    b.Property<string>("codi")
                        .HasColumnType("text");

                    b.Property<string>("kompanya_nomi")
                        .HasColumnType("text");

                    b.Property<string>("nomi")
                        .HasColumnType("text");

                    b.Property<string>("olchovi")
                        .HasColumnType("text");

                    b.Property<double?>("soni")
                        .HasColumnType("double precision");

                    b.Property<double?>("summa")
                        .HasColumnType("double precision");

                    b.ToTable("MarketOrderFullOrderedProducts");
                });

            modelBuilder.Entity("ApiAll.Model.MarketPayments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketInvoiceItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketOrderDetailId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketOrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.Property<string>("authPasswordAsCode")
                        .HasColumnType("text");

                    b.Property<double>("buyedPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("companyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("departmentName")
                        .HasColumnType("text");

                    b.Property<double>("persantage")
                        .HasColumnType("double precision");

                    b.Property<string>("productCode")
                        .HasColumnType("text");

                    b.Property<string>("productName")
                        .HasColumnType("text");

                    b.Property<double>("profitPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.Property<double>("saledPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("userName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MarketInvoiceItemId");

                    b.HasIndex("MarketOrderDetailId");

                    b.HasIndex("MarketOrderId");

                    b.HasIndex("MarketProductId");

                    b.HasIndex("UsersId");

                    b.ToTable("MarketPayments");
                });

            modelBuilder.Entity("ApiAll.Model.MarketPrePaidMoney", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<double>("realSumm")
                        .HasColumnType("double precision");

                    b.Property<double>("reservedSumm")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("MarketPrePaidMoney");
                });

            modelBuilder.Entity("ApiAll.Model.MarketProfitCustomReport", b =>
                {
                    b.Property<double?>("buyed_price")
                        .HasColumnType("double precision");

                    b.Property<string>("company_name")
                        .HasColumnType("text");

                    b.Property<double?>("profit_price")
                        .HasColumnType("double precision");

                    b.Property<double?>("saled_price")
                        .HasColumnType("double precision");

                    b.ToTable("MarketProfitCustomReport");
                });

            modelBuilder.Entity("ApiAll.Model.PatientRecipeByDoctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<string>("patientRecipeTitle")
                        .HasColumnType("text");

                    b.Property<string>("patinetRecipeStr")
                        .HasColumnType("text");

                    b.Property<DateTime>("registratedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientsId");

                    b.ToTable("PatientRecipeByDoctor");
                });

            modelBuilder.Entity("ApiAll.Model.PatientRegistrationInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("PatientServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReasonPatient")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientServiceTypeId");

                    b.HasIndex("PatientTypeId");

                    b.HasIndex("PatientsId");

                    b.ToTable("patientRegistrationInfos");
                });

            modelBuilder.Entity("ApiAll.Model.PatientServiceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("patientServiceTypes");
                });

            modelBuilder.Entity("ApiAll.Model.PatientType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("patientTypes");
                });

            modelBuilder.Entity("ApiAll.Model.Patients", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("DistrictsId")
                        .HasColumnType("bigint");

                    b.Property<string>("FIO")
                        .HasColumnType("text");

                    b.Property<string>("PassportSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PolType")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonUnregistrated")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistratedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TreatmentPlaces")
                        .HasColumnType("text");

                    b.Property<string>("TreatmentPlacesCurrentPlaces")
                        .HasColumnType("text");

                    b.Property<string>("TreatmentPlacesOtherPlaces")
                        .HasColumnType("text");

                    b.Property<DateTime>("UnregistratedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WorkAddress")
                        .HasColumnType("text");

                    b.Property<long?>("chatBotId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DistrictsId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ApiAll.Model.PaymentRooms", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("BeginBookRoomDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndBookRoomDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistretedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("RoomsId")
                        .HasColumnType("bigint");

                    b.Property<long>("Summ")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("PaymentRooms");
                });

            modelBuilder.Entity("ApiAll.Model.PaymentRoomsItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long?>("PaymentRoomsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PaymentRoomsId");

                    b.ToTable("PaymentRoomsItem");
                });

            modelBuilder.Entity("ApiAll.Model.PaymentRoomsServiceTypesItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientName")
                        .HasColumnType("text");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<long>("PaymentRoomsId")
                        .HasColumnType("bigint");

                    b.Property<long>("RealCountService")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceTypeName")
                        .HasColumnType("text");

                    b.Property<long>("Summ")
                        .HasColumnType("bigint");

                    b.Property<long>("UsedCountService")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.HasIndex("PaymentRoomsId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("PaymentRoomsServiceTypesItem");
                });

            modelBuilder.Entity("ApiAll.Model.PaymentRoomsServiceTypesItemInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<long>("PaymentRoomsServiceTypesItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistretedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PaymentRoomsServiceTypesItemId");

                    b.ToTable("PaymentRoomsServiceTypesItemInfo");
                });

            modelBuilder.Entity("ApiAll.Model.Payments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContragentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Finish")
                        .HasColumnType("boolean");

                    b.Property<bool>("FinishPayment")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PatientName")
                        .HasColumnType("text");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PayedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("PaymentInCard")
                        .HasColumnType("bigint");

                    b.Property<long>("PaymentInCash")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistratedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ReserveSumm")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("Summ")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("acceptanceDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("creatorAuthId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ContragentId");

                    b.HasIndex("PatientsId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("ApiAll.Model.Position", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("positions");
                });

            modelBuilder.Entity("ApiAll.Model.Province", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("provinces");
                });

            modelBuilder.Entity("ApiAll.Model.ReturnMoney", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistratedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.Property<long>("price")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("UsersId");

                    b.ToTable("returnMoney");
                });

            modelBuilder.Entity("ApiAll.Model.RoomBooking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("BeginDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReqistratedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("RoomsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatetedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("regDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("RoomBooking");
                });

            modelBuilder.Entity("ApiAll.Model.RoomColectionInformations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("count")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<string>("number")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("roomColectionInformations");
                });

            modelBuilder.Entity("ApiAll.Model.Rooms", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<int>("BedsCount")
                        .HasColumnType("integer");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("ApiAll.Model.ServiceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("HospitalServiceTypeGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<bool>("calculateWithPersentage")
                        .HasColumnType("boolean");

                    b.Property<double>("contragentPrice")
                        .HasColumnType("double precision");

                    b.Property<bool>("paymentable")
                        .HasColumnType("boolean");

                    b.Property<double>("persantage")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("HospitalServiceTypeGroupId");

                    b.ToTable("serviceTypes");
                });

            modelBuilder.Entity("ApiAll.Model.ServiceTypeDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("UsersId");

                    b.ToTable("ServiceTypeDetail");
                });

            modelBuilder.Entity("ApiAll.Model.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("DepartmenId")
                        .HasColumnType("bigint");

                    b.Property<string>("FIO")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PolType")
                        .HasColumnType("integer");

                    b.Property<long?>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<long?>("departmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("roomsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("userRegistratedBotId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("departmentId");

                    b.HasIndex("roomsId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ApiAll.Model.VozvratAlreadyPaidPaymentList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("SerivceTypeName")
                        .HasColumnType("text");

                    b.Property<string>("ServiceGroupName")
                        .HasColumnType("text");

                    b.Property<string>("contragentName")
                        .HasColumnType("text");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("patientName")
                        .HasColumnType("text");

                    b.Property<long?>("paymentCreatorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("paymentDeletorId")
                        .HasColumnType("bigint");

                    b.Property<long>("summa")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("VozvratAlreadyPaidPaymentList");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveAccessMenu", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("url")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("archive_menu");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveAccessMenuItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("ArchiveAccessMenuid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("url")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("ArchiveAccessMenuid");

                    b.ToTable("archive_menu_item");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveCompany", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("archive_company");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveDatchik", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("max_value")
                        .HasColumnType("double precision");

                    b.Property<double>("min_value")
                        .HasColumnType("double precision");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("archive_datchik");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveDepartment", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("ArchiveCompanyid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("ArchiveCompanyid");

                    b.ToTable("archive_department");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveDevice", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("password")
                        .HasColumnType("integer");

                    b.Property<int>("port")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("archive_device");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveNotificationReciver", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("bot_id")
                        .HasColumnType("bigint");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("fio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("archive_notify_reciver");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveRoom", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("archive_room");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveRoomDatchikDetail", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("datchik_number")
                        .HasColumnType("text");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("device_number")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("value")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.ToTable("archive_room_datchik_detail");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveRoomDetail", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("ArchiveDatchikid")
                        .HasColumnType("bigint");

                    b.Property<long>("ArchiveRoomid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("ArchiveDatchikid");

                    b.HasIndex("ArchiveRoomid");

                    b.ToTable("archive_room_detail");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveUser", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("ArchiveDepartmentid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("card_number")
                        .HasColumnType("text");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("device_number")
                        .HasColumnType("text");

                    b.Property<int>("emp_number")
                        .HasColumnType("integer");

                    b.Property<string>("father_name")
                        .HasColumnType("text");

                    b.Property<string>("fio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<string>("login")
                        .HasColumnType("text");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("position")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("user_type")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("ArchiveDepartmentid");

                    b.ToTable("archive_user");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveUsersCheckInOutReport", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("checkdate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("checktime")
                        .HasColumnType("time");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("device_id")
                        .HasColumnType("bigint");

                    b.Property<string>("device_ip")
                        .HasColumnType("text");

                    b.Property<string>("device_name")
                        .HasColumnType("text");

                    b.Property<string>("device_type")
                        .HasColumnType("text");

                    b.Property<int>("emp_number")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("archive_user_check_in_out_report");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveWorkingTime", b =>
                {
                    b.Property<TimeSpan?>("working_time_without_gr")
                        .HasColumnType("interval");

                    b.ToTable("ArchiveWorkingTime");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketAgent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("bornDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("companyName")
                        .HasColumnType("text");

                    b.Property<string>("fullName")
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("specialCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MarketAgent");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketAuthLimitByMoney", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("beginDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("endDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("limitFinished")
                        .HasColumnType("boolean");

                    b.Property<double>("realSumm")
                        .HasColumnType("double precision");

                    b.Property<double>("reservedSumm")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.ToTable("MarketAuthLimitByMoney");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketAuthLimitByMoneyDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("MarketAuthLimitByMoneyId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketOrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("summ")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MarketAuthLimitByMoneyId");

                    b.HasIndex("MarketOrderId");

                    b.ToTable("MarketAuthLimitByMoneyDetail");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketAuthLimitByProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("beginDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("endDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("limitFinished")
                        .HasColumnType("boolean");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.Property<double>("realQty")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("MarketProductId");

                    b.ToTable("MarketAuthLimitByProduct");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketAuthLimitByProductDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("MarketAuthLimitByProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketOrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MarketAuthLimitByProductId");

                    b.HasIndex("MarketOrderId");

                    b.ToTable("MarketAuthLimitByProductDetail");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketClientInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Statya")
                        .HasColumnType("text");

                    b.Property<string>("codeStr")
                        .HasColumnType("text");

                    b.Property<string>("part")
                        .HasColumnType("text");

                    b.Property<string>("userFullName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.ToTable("MarketClientInfo");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketInvoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoceNumber")
                        .HasColumnType("text");

                    b.Property<long>("MarketAgentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("updateDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MarketAgentId");

                    b.ToTable("MarketInvoice");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketInvoiceItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long?>("MarketInvoiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("exiparedDateTimeBegin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("exiparedDateTimeEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.Property<double>("realQty")
                        .HasColumnType("double precision");

                    b.Property<double>("unitprice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MarketInvoiceId");

                    b.HasIndex("MarketProductId");

                    b.ToTable("MarketInvoiceItem");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketNeedToPayToAgentDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketNeedToPayToAgentsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("paymentTypeStr")
                        .HasColumnType("text");

                    b.Property<double>("summ")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("MarketNeedToPayToAgentsId");

                    b.ToTable("MarketNeedToPayToAgentDetail");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketNeedToPayToAgents", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketAgentId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketInvoiceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<double>("realSumm")
                        .HasColumnType("double precision");

                    b.Property<double>("summ")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("MarketAgentId");

                    b.HasIndex("MarketInvoiceId");

                    b.ToTable("MarketNeedToPayToAgents");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Statya")
                        .HasColumnType("text");

                    b.Property<DateTime>("acceptedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("acceptedStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("codeStr")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("limitSumm")
                        .HasColumnType("double precision");

                    b.Property<bool>("orderDeliveriedStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("orderNumber")
                        .HasColumnType("text");

                    b.Property<string>("part")
                        .HasColumnType("text");

                    b.Property<bool>("rejectedStatus")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("updateDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("userFullName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.ToTable("MarketOrder");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketOrderDeliveriedInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketOrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("MarketOrderId");

                    b.ToTable("MarketOrderDeliveriedInfo");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketOrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("MarketOrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("discountSumm")
                        .HasColumnType("bigint");

                    b.Property<string>("productCode")
                        .HasColumnType("text");

                    b.Property<string>("productName")
                        .HasColumnType("text");

                    b.Property<long>("productPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("productUnitMeasurmentName")
                        .HasColumnType("text");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.Property<double>("realQty")
                        .HasColumnType("double precision");

                    b.Property<long>("summ")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MarketOrderId");

                    b.HasIndex("MarketProductId");

                    b.ToTable("MarketOrderDetail");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("ManifacturerName")
                        .HasColumnType("text");

                    b.Property<long>("MarketUnitMeasurmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameForPrint")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Specs")
                        .HasColumnType("text");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MarketUnitMeasurmentId");

                    b.ToTable("MarketProduct");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketProductGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<bool>("MainProductGroup")
                        .HasColumnType("boolean");

                    b.Property<long?>("MarketProductGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PictureStr")
                        .HasColumnType("text");

                    b.Property<long?>("marketProductGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("marketProductGroupId");

                    b.ToTable("MarketProductGroup");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketProductGroupDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("MarketProductGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MarketProductGroupId");

                    b.HasIndex("MarketProductId");

                    b.ToTable("MarketProductGroupDetail");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketProductPrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long?>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("discountPrice")
                        .HasColumnType("double precision");

                    b.Property<bool>("discountStatus")
                        .HasColumnType("boolean");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("MarketProductId");

                    b.ToTable("MarketProductPrice");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketProductRealQty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("MarketProductId")
                        .HasColumnType("bigint");

                    b.Property<double?>("minValue")
                        .HasColumnType("double precision");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.Property<double>("realQty")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MarketProductId");

                    b.ToTable("MarketProductRealQty");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketProductRealQtyTemp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("MarketOrderDetailId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketProductId")
                        .HasColumnType("bigint");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MarketOrderDetailId");

                    b.HasIndex("MarketProductId");

                    b.ToTable("MarketProductRealQtyTemp");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketUnitMeasurment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MarketUnitMeasurment");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosAuthorization", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("access_type")
                        .HasColumnType("integer");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("login")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("password_not_md5")
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("company_id");

                    b.HasIndex("user_id");

                    b.ToTable("pos_authorization");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosBrend", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("pos_brend");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosCardDetail", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("card_number")
                        .HasColumnType("text");

                    b.Property<long>("card_type_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("card_type_id");

                    b.ToTable("pos_card_detail");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosCategory", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("pos_category");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosCheck", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("PosAuthorizationid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<double>("bonus_summ")
                        .HasColumnType("double precision");

                    b.Property<double>("card_sum")
                        .HasColumnType("double precision");

                    b.Property<double>("cash_sum")
                        .HasColumnType("double precision");

                    b.Property<bool>("check_revert_status")
                        .HasColumnType("boolean");

                    b.Property<double>("click_sum")
                        .HasColumnType("double precision");

                    b.Property<bool>("closed_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("discount_summ")
                        .HasColumnType("double precision");

                    b.Property<double>("humo_sum")
                        .HasColumnType("double precision");

                    b.Property<double>("mobil_sum")
                        .HasColumnType("double precision");

                    b.Property<double>("online_sum")
                        .HasColumnType("double precision");

                    b.Property<double>("payme_sum")
                        .HasColumnType("double precision");

                    b.Property<long?>("pos_client_id")
                        .HasColumnType("bigint");

                    b.Property<double>("profit_summ")
                        .HasColumnType("double precision");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<double>("summ")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("PosAuthorizationid");

                    b.ToTable("pos_check");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosClient", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<long?>("bot_id")
                        .HasColumnType("bigint");

                    b.Property<string>("card_number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("cash_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("cashback_percentage")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("discount_percantage")
                        .HasColumnType("double precision");

                    b.Property<string>("fio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<string>("passport_number")
                        .HasColumnType("text");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("pos_client");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosClientCardType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<double>("discount_persantage")
                        .HasColumnType("double precision");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("pos_client_card_type");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosCompany", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<string>("bot_info")
                        .HasColumnType("text");

                    b.Property<bool>("client_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("info")
                        .HasColumnType("text");

                    b.Property<string>("info_bot_key")
                        .HasColumnType("text");

                    b.Property<string>("location_company")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<double?>("nds")
                        .HasColumnType("double precision");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<string>("order_bot_key")
                        .HasColumnType("text");

                    b.Property<string>("orderbot_info")
                        .HasColumnType("text");

                    b.Property<bool>("pastavshik_status")
                        .HasColumnType("boolean");

                    b.Property<string>("print_name")
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<string>("stir")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("pos_company");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosCosts", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("PosAuthorizationid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<bool>("closed_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<double>("summ")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("PosAuthorizationid");

                    b.ToTable("pos_costs");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosCreditor", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("PosInvoiceid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("creditor_price")
                        .HasColumnType("double precision");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<double>("real_creditor_price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("reg_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("PosInvoiceid");

                    b.ToTable("pos_creditor");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosCreditorItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("PosCreditorid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("reg_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("summ")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("PosCreditorid");

                    b.ToTable("pos_creditor_item");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosCurrencyType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<double>("nds_persantage")
                        .HasColumnType("double precision");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("pos_currency_type");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosDebitor", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("PosCompanyid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("debitor_price")
                        .HasColumnType("double precision");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<double>("real_debitor_price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("reg_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("PosCompanyid");

                    b.ToTable("pos_debitor");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosDebitorInvoice", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("PosAuthorizationid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<bool>("applyment_status")
                        .HasColumnType("boolean");

                    b.Property<bool>("closed_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("credit_sum")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("debit_summ")
                        .HasColumnType("double precision");

                    b.Property<long>("department_id")
                        .HasColumnType("bigint");

                    b.Property<string>("factura_number")
                        .HasColumnType("text");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<long?>("postavshik_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<long>("sklad_id")
                        .HasColumnType("bigint");

                    b.Property<double>("summ")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("PosAuthorizationid");

                    b.HasIndex("department_id");

                    b.HasIndex("postavshik_id");

                    b.HasIndex("sklad_id");

                    b.ToTable("pos_debitor_invoice");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosDebitorInvoiceItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("PosDebitorInvoiceid")
                        .HasColumnType("bigint");

                    b.Property<long>("PosInvoiceItemid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<long>("product_id")
                        .HasColumnType("bigint");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("reg_date")
                        .HasColumnType("date");

                    b.Property<double>("saled_price")
                        .HasColumnType("double precision");

                    b.Property<double>("summ")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("PosDebitorInvoiceid");

                    b.HasIndex("PosInvoiceItemid");

                    b.HasIndex("product_id");

                    b.ToTable("pos_debitor_invoice_item");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosDebitorItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("PosAuthorizationid")
                        .HasColumnType("bigint");

                    b.Property<long>("PosDebitorid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<double>("bonus_summ")
                        .HasColumnType("double precision");

                    b.Property<double>("card_sum")
                        .HasColumnType("double precision");

                    b.Property<double>("cash_sum")
                        .HasColumnType("double precision");

                    b.Property<double>("click_sum")
                        .HasColumnType("double precision");

                    b.Property<bool>("closed_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("discount_summ")
                        .HasColumnType("double precision");

                    b.Property<double>("humo_sum")
                        .HasColumnType("double precision");

                    b.Property<double>("mobil_sum")
                        .HasColumnType("double precision");

                    b.Property<double>("online_sum")
                        .HasColumnType("double precision");

                    b.Property<double>("payme_sum")
                        .HasColumnType("double precision");

                    b.Property<double>("profit_summ")
                        .HasColumnType("double precision");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("reg_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("summ")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("PosAuthorizationid");

                    b.HasIndex("PosDebitorid");

                    b.ToTable("pos_debitor_item");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosDepartment", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("main_department_id")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("company_id");

                    b.HasIndex("main_department_id");

                    b.ToTable("pos_department");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosInvoice", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<bool>("applyment_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("credit_sum")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("debit_summ")
                        .HasColumnType("double precision");

                    b.Property<long>("department_id")
                        .HasColumnType("bigint");

                    b.Property<string>("factura_number")
                        .HasColumnType("text");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<long?>("postavshik_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<long>("sklad_id")
                        .HasColumnType("bigint");

                    b.Property<double>("summ")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("department_id");

                    b.HasIndex("postavshik_id");

                    b.HasIndex("sklad_id");

                    b.ToTable("pos_invoice");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosInvoiceItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("PosInvoiceid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<bool>("change_price_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("expired_date")
                        .HasColumnType("date");

                    b.Property<bool>("finished")
                        .HasColumnType("boolean");

                    b.Property<double?>("persantage")
                        .HasColumnType("double precision");

                    b.Property<double>("persantage_discount")
                        .HasColumnType("double precision");

                    b.Property<double>("persantage_nds")
                        .HasColumnType("double precision");

                    b.Property<long>("product_id")
                        .HasColumnType("bigint");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.Property<double>("qty_in_pack")
                        .HasColumnType("double precision");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<double>("real_qty")
                        .HasColumnType("double precision");

                    b.Property<double>("saved_in_pack")
                        .HasColumnType("double precision");

                    b.Property<double>("summ")
                        .HasColumnType("double precision");

                    b.Property<double?>("unit_buyed_price")
                        .HasColumnType("double precision");

                    b.Property<double>("unit_discount_price")
                        .HasColumnType("double precision");

                    b.Property<double?>("unit_saled_price")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("PosInvoiceid");

                    b.HasIndex("product_id");

                    b.ToTable("pos_invoice_item");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosKassaCurrentPosition", b =>
                {
                    b.Property<double?>("bonus_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("card_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("cash_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("click_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("discount_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("humo_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("mobil_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("online_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("payme_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("profit_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("total_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("xarajat_sum")
                        .HasColumnType("double precision");

                    b.ToTable("pos_kassa_current_position");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosKassaCurrentPositionWithName", b =>
                {
                    b.Property<double?>("bonus_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("card_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("cash_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("click_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("discount_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("humo_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("mobil_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("online_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("payme_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("profit_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("total_sum")
                        .HasColumnType("double precision");

                    b.Property<string>("user_name")
                        .HasColumnType("text");

                    b.Property<double?>("xarajat_sum")
                        .HasColumnType("double precision");

                    b.ToTable("pos_kassa_current_position_with_name");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosKassirInfo", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<double?>("profit_sum")
                        .HasColumnType("double precision");

                    b.Property<double?>("total_sum")
                        .HasColumnType("double precision");

                    b.ToTable("pos_kassa_info");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosManifacturer", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("pos_manifacturer");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosMessage", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("answered_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("groupid")
                        .HasColumnType("bigint");

                    b.Property<string>("message")
                        .HasColumnType("text");

                    b.Property<long>("pos_message_group_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("readed_statatus")
                        .HasColumnType("boolean");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("send_or_recive_status")
                        .HasColumnType("boolean");

                    b.Property<bool>("sended_ower_bot_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("groupid");

                    b.ToTable("pos_message");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosMessageGroup", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long>("bot_id")
                        .HasColumnType("bigint");

                    b.Property<string>("bot_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("phone_number")
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("reg_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("pos_message_group");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosOrder", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("pos_order");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosOrderItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("pos_order_item");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosPayments", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long?>("PosCheckid")
                        .HasColumnType("bigint");

                    b.Property<long>("PosInvoiceItemid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<bool>("check_revert_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("discount_summ")
                        .HasColumnType("double precision");

                    b.Property<long?>("product_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("productid")
                        .HasColumnType("bigint");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.Property<double>("qty_in_pack")
                        .HasColumnType("double precision");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<double>("real_sum")
                        .HasColumnType("double precision");

                    b.Property<double>("summ")
                        .HasColumnType("double precision");

                    b.Property<double>("unit_price")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("PosCheckid");

                    b.HasIndex("PosInvoiceItemid");

                    b.HasIndex("productid");

                    b.ToTable("pos_payments");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosProduct", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("barcode")
                        .HasColumnType("text");

                    b.Property<string>("bot_name")
                        .HasColumnType("text");

                    b.Property<long?>("brend_id")
                        .HasColumnType("bigint");

                    b.Property<double?>("buyed_price")
                        .HasColumnType("double precision");

                    b.Property<long?>("category_id")
                        .HasColumnType("bigint");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<double?>("contains_number_in_pack")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("discount_status")
                        .HasColumnType("boolean");

                    b.Property<string>("dozirofka")
                        .HasColumnType("text");

                    b.Property<string>("global_name")
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<string>("info")
                        .HasColumnType("text");

                    b.Property<long?>("main_product_id")
                        .HasColumnType("bigint");

                    b.Property<string>("manifacturer_name")
                        .HasColumnType("text");

                    b.Property<double?>("min_qty")
                        .HasColumnType("double precision");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<double?>("nds")
                        .HasColumnType("double precision");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<double?>("percentage")
                        .HasColumnType("double precision");

                    b.Property<double?>("price")
                        .HasColumnType("double precision");

                    b.Property<string>("print_name")
                        .HasColumnType("text");

                    b.Property<string>("product_reg_code")
                        .HasColumnType("text");

                    b.Property<long?>("product_tag_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("product_type_id")
                        .HasColumnType("bigint");

                    b.Property<string>("product_type_str")
                        .HasColumnType("text");

                    b.Property<string>("publisher_name")
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("retsepniy")
                        .HasColumnType("boolean");

                    b.Property<string>("sale_name")
                        .HasColumnType("text");

                    b.Property<bool>("spravichniy")
                        .HasColumnType("boolean");

                    b.Property<string>("tax_number")
                        .HasColumnType("text");

                    b.Property<long>("unitmeasurment_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("brend_id");

                    b.HasIndex("category_id");

                    b.HasIndex("main_product_id");

                    b.HasIndex("product_tag_id");

                    b.HasIndex("product_type_id");

                    b.HasIndex("unitmeasurment_id");

                    b.ToTable("pos_product");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosProductCode", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("barcode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("product_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("product_id");

                    b.ToTable("pos_product_code");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosProductPrice", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<double?>("buyed_price")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("percantage")
                        .HasColumnType("double precision");

                    b.Property<double?>("price")
                        .HasColumnType("double precision");

                    b.Property<long>("product_id")
                        .HasColumnType("bigint");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.Property<double>("qty_in_pack")
                        .HasColumnType("double precision");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<double>("real_qty")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("product_id");

                    b.ToTable("pos_product_price");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosProductTag", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("pos_product_tag");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosProductType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("pos_product_type");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosProductUnitMeasurment", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("pos_product_unitmeasurment");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosRealSummOfAllProducts", b =>
                {
                    b.Property<double?>("buyed_summa")
                        .HasColumnType("double precision");

                    b.Property<double?>("saled_summa")
                        .HasColumnType("double precision");

                    b.ToTable("pos_real_summ_of_all_products");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosRecipe", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<long>("product_id")
                        .HasColumnType("bigint");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<long>("recipe_product_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("product_id");

                    b.HasIndex("recipe_product_id");

                    b.ToTable("pos_recipe");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosRevert", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<bool>("applayment_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<long?>("postavshik_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("reg_date")
                        .HasColumnType("date");

                    b.Property<DateTime>("revert_date")
                        .HasColumnType("date");

                    b.Property<int>("revert_status")
                        .HasColumnType("integer");

                    b.Property<double>("summ")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("postavshik_id");

                    b.ToTable("pos_revert");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosRevertItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("PosInvoiceItemid")
                        .HasColumnType("bigint");

                    b.Property<long>("PosRevertid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("check_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<long>("product_id")
                        .HasColumnType("bigint");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.Property<double>("qty_in_pack")
                        .HasColumnType("double precision");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("PosInvoiceItemid");

                    b.HasIndex("PosRevertid");

                    b.HasIndex("check_id");

                    b.HasIndex("product_id");

                    b.ToTable("pos_revert_item");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosRevertStatus", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("pos_revert_status");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosSaledProductsDegreeQty", b =>
                {
                    b.Property<string>("product_name")
                        .HasColumnType("text");

                    b.Property<double?>("profit_price")
                        .HasColumnType("double precision");

                    b.Property<double?>("total_prixod_price")
                        .HasColumnType("double precision");

                    b.Property<double?>("total_qty")
                        .HasColumnType("double precision");

                    b.Property<double?>("total_saled_sum")
                        .HasColumnType("double precision");

                    b.ToTable("pos_saled_products_degree_qty");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosSklad", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("department_id")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("department_id");

                    b.ToTable("pos_sklad");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosSubDepartment", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("department_id")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("department_id");

                    b.ToTable("pos_sub_department");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosUser", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<long?>("bot_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("fio")
                        .HasColumnType("text");

                    b.Property<string>("phone_number")
                        .HasColumnType("text");

                    b.Property<long?>("real_company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("pos_user");
                });

            modelBuilder.Entity("ApiAll.Model.settingsmodel.AccessMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("MenuId");

                    b.ToTable("accessMenus");
                });

            modelBuilder.Entity("ApiAll.Model.settingsmodel.AccessMenuItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("AccessMenuId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("MenuItemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccessMenuId");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("accessMenuItems");
                });

            modelBuilder.Entity("ApiAll.Model.settingsmodel.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("IconStr")
                        .HasColumnType("text");

                    b.Property<string>("LinkStr")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("menus");
                });

            modelBuilder.Entity("ApiAll.Model.settingsmodel.MenuItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("IconStr")
                        .HasColumnType("text");

                    b.Property<string>("LinkStr")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("menuItems");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudAccessLevel", b =>
                {
                    b.Property<string>("acc_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name_devices")
                        .HasColumnType("text");

                    b.Property<string>("time_zones")
                        .HasColumnType("text");

                    b.ToTable("access_levels");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudDevices", b =>
                {
                    b.Property<string>("bor")
                        .HasColumnType("text");

                    b.Property<string>("device_name")
                        .HasColumnType("text");

                    b.Property<string>("ip_address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("mac_address")
                        .HasColumnType("text");

                    b.Property<string>("main_door")
                        .HasColumnType("text");

                    b.Property<string>("sn")
                        .HasColumnType("text");

                    b.Property<string>("tip")
                        .HasColumnType("text");

                    b.HasIndex("device_name")
                        .IsUnique();

                    b.ToTable("devices");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudDoorCheckinout", b =>
                {
                    b.Property<long>("code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("begona")
                        .HasColumnType("text");

                    b.Property<DateTime>("checktime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("checktype")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("door_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("sana")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("userid")
                        .HasColumnType("bigint");

                    b.HasKey("code");

                    b.HasIndex("userid", "sana", "checktime")
                        .IsUnique();

                    b.ToTable("SkudDoorCheckinout");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudDoors", b =>
                {
                    b.Property<string>("acc_name")
                        .HasColumnType("text");

                    b.Property<string>("dbname")
                        .HasColumnType("text");

                    b.Property<int?>("detectortime")
                        .HasColumnType("integer");

                    b.Property<string>("device")
                        .HasColumnType("text");

                    b.Property<int>("door_opentzid")
                        .HasColumnType("integer");

                    b.Property<string>("drivertime")
                        .HasColumnType("text");

                    b.Property<string>("inout")
                        .HasColumnType("text");

                    b.Property<int?>("intertime")
                        .HasColumnType("integer");

                    b.Property<string>("login")
                        .HasColumnType("text");

                    b.Property<int?>("nomer")
                        .HasColumnType("integer");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("sensortype")
                        .HasColumnType("text");

                    b.HasIndex("dbname")
                        .IsUnique();

                    b.ToTable("SkudDoors");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudFaces", b =>
                {
                    b.Property<string>("ip")
                        .HasColumnType("text");

                    b.Property<string>("nomi")
                        .HasColumnType("text");

                    b.HasIndex("ip")
                        .IsUnique();

                    b.HasIndex("nomi")
                        .IsUnique();

                    b.ToTable("SkudFaces");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudForTrenajor", b =>
                {
                    b.Property<long>("userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("active_days")
                        .HasColumnType("integer");

                    b.Property<DateTime>("b_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("e_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("userid");

                    b.ToTable("SkudForTrenajor");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudGrForEmp", b =>
                {
                    b.Property<long>("id_emp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("_begin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("gr_nomi")
                        .HasColumnType("text");

                    b.HasKey("id_emp");

                    b.ToTable("SkudGrForEmp");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudGroupAccess", b =>
                {
                    b.Property<string>("group_name")
                        .HasColumnType("text");

                    b.Property<int>("_index")
                        .HasColumnType("integer");

                    b.Property<string>("acc_level")
                        .HasColumnType("text");

                    b.Property<string>("door")
                        .HasColumnType("text");

                    b.Property<int>("doorno")
                        .HasColumnType("integer");

                    b.HasKey("group_name");

                    b.ToTable("SkudGroupAccess");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudImages", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<byte>("rasm")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("SkudImages");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudLk", b =>
                {
                    b.Property<string>("lkey")
                        .HasColumnType("text");

                    b.HasIndex("lkey")
                        .IsUnique();

                    b.ToTable("SkudLk");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudMyCheckinout", b =>
                {
                    b.Property<long>("code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("checktime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("checktype")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("door_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("sana")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("userid")
                        .HasColumnType("bigint");

                    b.HasKey("code");

                    b.HasIndex("userid", "sana", "checktime")
                        .IsUnique();

                    b.ToTable("SkudMyCheckinout");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudMyDepartments", b =>
                {
                    b.Property<long>("deptid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long?>("code")
                        .HasColumnType("bigint");

                    b.Property<string>("deptname")
                        .HasColumnType("text");

                    b.Property<long?>("supdeptid")
                        .HasColumnType("bigint");

                    b.HasKey("deptid");

                    b.HasIndex("deptname")
                        .IsUnique();

                    b.ToTable("SkudMyDepartments");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudPeriod", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("b_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("e_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("SkudPeriod");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudPictureCheckinout", b =>
                {
                    b.Property<DateTime>("checktime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("rasm")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("sana")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("userid")
                        .HasColumnType("bigint");

                    b.ToTable("SkudPictureCheckinout");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudResultGr", b =>
                {
                    b.Property<string>("g_nomi")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ish_b")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ish_t")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("kech_keldi")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("kun_nomi")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("obed_b")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("obed_t")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("vox_ketdi")
                        .HasColumnType("timestamp without time zone");

                    b.ToTable("SkudResultGr");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudSababli", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime?>("_begin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("b_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("e_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("sababi")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("SkudSababli");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudSmena", b =>
                {
                    b.Property<DateTime>("boshlanishi")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("kech_keldi")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("obed_b")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("obed_t")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("smena_nomi")
                        .HasColumnType("text");

                    b.Property<DateTime>("tugashi")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("vox_ketdi")
                        .HasColumnType("timestamp without time zone");

                    b.ToTable("SkudSmena");
                });

            modelBuilder.Entity("ApiAll.Model.skud.SkudTablename", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<byte>("_data")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.ToTable("SkudTablename");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexAuthorization", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("login")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("password_not_md5")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.Property<int>("user_type")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("company_id");

                    b.HasIndex("login")
                        .IsUnique();

                    b.HasIndex("user_id");

                    b.ToTable("tex_authorization");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexBatch", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("begin_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("color_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("color_variant_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("device_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("gus_color_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("order_item_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("color_id");

                    b.HasIndex("color_variant_id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("device_id");

                    b.HasIndex("gus_color_id");

                    b.HasIndex("order_item_id");

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_batch");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexBatchprocess", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_batchprocess");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexCalcType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_calctype");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexCategory", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<double?>("brutto")
                        .HasColumnType("double precision");

                    b.Property<double?>("count")
                        .HasColumnType("double precision");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("kg")
                        .HasColumnType("double precision");

                    b.Property<double?>("litr")
                        .HasColumnType("double precision");

                    b.Property<long?>("measurment_type_id")
                        .HasColumnType("bigint");

                    b.Property<double?>("metr")
                        .HasColumnType("double precision");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("print_name")
                        .HasColumnType("text");

                    b.Property<long?>("producttype_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.Property<List<long>>("xarakteristika_id")
                        .HasColumnType("bigint[]");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("measurment_type_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("producttype_id");

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_category");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexColor", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("color_code")
                        .HasColumnType("text");

                    b.Property<long?>("color_group_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("contraget_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("dieing_code")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("pantone_code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("color_group_id");

                    b.HasIndex("contraget_id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_color");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexColorGroup", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("generated_value")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_color_group");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexColorVariantRecipe", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("color_proccess_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("color_variant_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("product_id")
                        .HasColumnType("bigint");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.Property<long?>("unitmeasurment_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("color_proccess_id");

                    b.HasIndex("color_variant_id");

                    b.HasIndex("product_id");

                    b.HasIndex("unitmeasurment_id");

                    b.ToTable("tex_colorvariant_recipe");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexColorVariantType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("gcode")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_color_variant_type");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexColorproccess", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_color_proccess");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexColorvariant", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("batchprocess_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("color_id")
                        .HasColumnType("bigint");

                    b.Property<int?>("color_number")
                        .HasColumnType("integer");

                    b.Property<long?>("color_variant_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("guscolor_id")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<long?>("parent_colorvariant_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("product_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("rpt_sequence")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("batchprocess_id");

                    b.HasIndex("color_id");

                    b.HasIndex("color_variant_type_id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("guscolor_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("parent_colorvariant_id");

                    b.HasIndex("product_id");

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_colorvariant");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexColumnConfig", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long>("auth_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("authorizationid")
                        .HasColumnType("bigint");

                    b.Property<string>("columns")
                        .HasColumnType("jsonb");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("table_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("authorizationid");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_column_config");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexColumnConfigRaw", b =>
                {
                    b.Property<string>("column_name")
                        .HasColumnType("text");

                    b.ToTable("tex_column_config_raw");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexContragent", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<bool>("type_client")
                        .HasColumnType("boolean");

                    b.Property<bool>("type_maincompany")
                        .HasColumnType("boolean");

                    b.Property<bool>("type_postavshik")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("tex_contragent");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexDepartment", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<int?>("code")
                        .HasColumnType("integer");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("main_department_id")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("company_id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("main_department_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_department");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexDevice", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("department_id")
                        .HasColumnType("bigint");

                    b.Property<long>("device_type_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ip")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("code")
                        .IsUnique();

                    b.HasIndex("created_auth_id");

                    b.HasIndex("department_id");

                    b.HasIndex("device_type_id");

                    b.HasIndex("ip")
                        .IsUnique();

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_device");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexDeviceSubProccessDetail", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("TexDeviceid")
                        .HasColumnType("bigint");

                    b.Property<long>("TexSubProccessid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("TexDeviceid");

                    b.HasIndex("TexSubProccessid");

                    b.ToTable("tex_device_sub_proccess_detail");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexDeviceType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_device_type");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexExtrawork", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_extra_work");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexGuscolor", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_guscolor");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexInvoice", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("accepted_user")
                        .HasColumnType("boolean");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("begin_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("calc_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("contraget_id")
                        .HasColumnType("bigint");

                    b.Property<double?>("count")
                        .HasColumnType("double precision");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("department_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("end_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("filial_id")
                        .HasColumnType("bigint");

                    b.Property<string>("invoice_filter_status")
                        .HasColumnType("text");

                    b.Property<long?>("invoice_type_id")
                        .HasColumnType("bigint");

                    b.Property<double?>("kurs_valyut")
                        .HasColumnType("double precision");

                    b.Property<long?>("main_company_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("main_department_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("main_sklad_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("order_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("payment_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("receved_auth_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("service_type_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("sklad_id")
                        .HasColumnType("bigint");

                    b.Property<string>("status_type_name")
                        .HasColumnType("text");

                    b.Property<double?>("summa")
                        .HasColumnType("double precision");

                    b.Property<long?>("updated_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("valyuta_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("calc_type_id");

                    b.HasIndex("contraget_id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("department_id");

                    b.HasIndex("filial_id");

                    b.HasIndex("invoice_type_id");

                    b.HasIndex("main_company_id");

                    b.HasIndex("main_department_id");

                    b.HasIndex("main_sklad_id");

                    b.HasIndex("order_id");

                    b.HasIndex("payment_type_id");

                    b.HasIndex("receved_auth_id");

                    b.HasIndex("service_type_id");

                    b.HasIndex("sklad_id");

                    b.HasIndex("updated_auth_id");

                    b.HasIndex("valyuta_id");

                    b.ToTable("tex_invoice");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexInvoiceItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<bool>("brak")
                        .HasColumnType("boolean");

                    b.Property<double?>("brutto")
                        .HasColumnType("double precision");

                    b.Property<long?>("color_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("color_variant_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("extra_work_id")
                        .HasColumnType("bigint");

                    b.Property<string>("fein")
                        .HasColumnType("text");

                    b.Property<double?>("grammaj")
                        .HasColumnType("double precision");

                    b.Property<long?>("gus_color_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("invoice_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("invoice_type_id")
                        .HasColumnType("bigint");

                    b.Property<long>("item_status_id")
                        .HasColumnType("bigint");

                    b.Property<string>("lot")
                        .HasColumnType("text");

                    b.Property<long?>("main_item_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("main_proccess_id")
                        .HasColumnType("bigint");

                    b.Property<double?>("metraj")
                        .HasColumnType("double precision");

                    b.Property<double?>("netto")
                        .HasColumnType("double precision");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<long?>("order_item_id")
                        .HasColumnType("bigint");

                    b.Property<double?>("ostatka")
                        .HasColumnType("double precision");

                    b.Property<double?>("price")
                        .HasColumnType("double precision");

                    b.Property<double?>("price_real")
                        .HasColumnType("double precision");

                    b.Property<long?>("product_id")
                        .HasColumnType("bigint");

                    b.Property<string>("pus")
                        .HasColumnType("text");

                    b.Property<double?>("qty")
                        .HasColumnType("double precision");

                    b.Property<double?>("qty2")
                        .HasColumnType("double precision");

                    b.Property<double?>("shirina")
                        .HasColumnType("double precision");

                    b.Property<long?>("simple_prod_main_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("sort_id")
                        .HasColumnType("bigint");

                    b.Property<string>("status_type_name")
                        .HasColumnType("text");

                    b.Property<double?>("summ")
                        .HasColumnType("double precision");

                    b.Property<long?>("suroviy_vid_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("ugar")
                        .HasColumnType("boolean");

                    b.Property<long?>("upakovka_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("color_id");

                    b.HasIndex("color_variant_id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("extra_work_id");

                    b.HasIndex("gus_color_id");

                    b.HasIndex("invoice_id");

                    b.HasIndex("invoice_type_id");

                    b.HasIndex("item_status_id");

                    b.HasIndex("main_item_id");

                    b.HasIndex("main_proccess_id");

                    b.HasIndex("order_item_id");

                    b.HasIndex("product_id");

                    b.HasIndex("sort_id");

                    b.HasIndex("suroviy_vid_id");

                    b.HasIndex("upakovka_id");

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_invoice_item");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexInvoiceType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_invoice_type");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexLanguage", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("user_auth_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("updated_user_id");

                    b.HasIndex("user_auth_id");

                    b.HasIndex("name", "user_auth_id")
                        .IsUnique();

                    b.ToTable("tex_language");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexMainProccess", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<List<long>>("proccess_id")
                        .HasColumnType("bigint[]");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_main_prossess");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexMeasurmentType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_measurment_type");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexMessage", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("friend_auth_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("main_message_id")
                        .HasColumnType("bigint");

                    b.Property<string>("message")
                        .HasColumnType("text");

                    b.Property<DateTime>("message_date")
                        .HasColumnType("date");

                    b.Property<DateTime>("message_receved_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("message_send_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("message_type")
                        .HasColumnType("text");

                    b.Property<long>("owner_auth_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("readed_status")
                        .HasColumnType("boolean");

                    b.Property<long>("recevier_auth_id")
                        .HasColumnType("bigint");

                    b.Property<long>("sender_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("tex_message");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexMessageGroup", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("friend_auth_id")
                        .HasColumnType("bigint");

                    b.Property<long>("owner_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("tex_message_group");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexOrder", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("begin_datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("client_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("company_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("department_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("end_datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("kurs")
                        .HasColumnType("text");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<string>("order_number")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("valuta_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("client_id");

                    b.HasIndex("company_id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("department_id");

                    b.HasIndex("updated_user_id");

                    b.HasIndex("valuta_id");

                    b.ToTable("tex_order");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexOrderItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("artikul")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("begin_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("color_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("color_variant_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("extra_work_id")
                        .HasColumnType("bigint");

                    b.Property<double?>("extra_work_price")
                        .HasColumnType("double precision");

                    b.Property<string>("fein")
                        .HasColumnType("text");

                    b.Property<double?>("grammaj")
                        .HasColumnType("double precision");

                    b.Property<long?>("gus_color_id")
                        .HasColumnType("bigint");

                    b.Property<string>("lot")
                        .HasColumnType("text");

                    b.Property<long?>("main_order_item_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("main_proccess_id")
                        .HasColumnType("bigint");

                    b.Property<double?>("metraj")
                        .HasColumnType("double precision");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<long>("order_id")
                        .HasColumnType("bigint");

                    b.Property<string>("pantone_code")
                        .HasColumnType("text");

                    b.Property<double?>("price")
                        .HasColumnType("double precision");

                    b.Property<long?>("product_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("production_type_id")
                        .HasColumnType("bigint");

                    b.Property<string>("pus")
                        .HasColumnType("text");

                    b.Property<double>("qty")
                        .HasColumnType("double precision");

                    b.Property<long?>("service_type_id")
                        .HasColumnType("bigint");

                    b.Property<double?>("shirina")
                        .HasColumnType("double precision");

                    b.Property<long?>("size_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("suroviy_vid_id")
                        .HasColumnType("bigint");

                    b.Property<double?>("trb_grm_do")
                        .HasColumnType("double precision");

                    b.Property<double?>("trb_grm_ot")
                        .HasColumnType("double precision");

                    b.Property<double?>("trb_shir_do")
                        .HasColumnType("double precision");

                    b.Property<double?>("trb_shir_ot")
                        .HasColumnType("double precision");

                    b.Property<bool>("ugar")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("color_id");

                    b.HasIndex("color_variant_id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("extra_work_id");

                    b.HasIndex("gus_color_id");

                    b.HasIndex("main_order_item_id");

                    b.HasIndex("main_proccess_id");

                    b.HasIndex("order_id");

                    b.HasIndex("product_id");

                    b.HasIndex("production_type_id");

                    b.HasIndex("service_type_id");

                    b.HasIndex("size_id");

                    b.HasIndex("suroviy_vid_id");

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_order_item");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexOrderItemStepPermissions", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long>("auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("edit")
                        .HasColumnType("boolean");

                    b.Property<long>("order_steps_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("update")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("view")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.HasIndex("order_steps_id");

                    b.HasIndex("auth_id", "order_steps_id")
                        .IsUnique();

                    b.ToTable("tex_order_item_step_permissions");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexOrderItemSteps", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("cutting")
                        .HasColumnType("boolean");

                    b.Property<bool>("finish")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("tex_order_item_steps");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexOrderItemStepsDetail", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("begin_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("for_private_auth_id")
                        .HasColumnType("bigint");

                    b.Property<long>("order_item_id")
                        .HasColumnType("bigint");

                    b.Property<long>("order_item_steps_id")
                        .HasColumnType("bigint");

                    b.Property<int>("sort_number")
                        .HasColumnType("integer");

                    b.Property<bool>("start")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("stop")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("stop_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("timer_in_minuts")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("for_private_auth_id");

                    b.HasIndex("order_item_id");

                    b.HasIndex("order_item_steps_id");

                    b.HasIndex("sort_number", "order_item_id")
                        .IsUnique();

                    b.ToTable("tex_order_item_steps_detail");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexPaymentType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_payment_type");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexPlaningType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_planning_type");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexPosition", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_position");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexProduct", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("barcode")
                        .HasColumnType("bigint");

                    b.Property<double?>("brutto")
                        .HasColumnType("double precision");

                    b.Property<long?>("category_id")
                        .HasColumnType("bigint");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("code_2")
                        .HasColumnType("text");

                    b.Property<double?>("count")
                        .HasColumnType("double precision");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<double?>("kg")
                        .HasColumnType("double precision");

                    b.Property<double?>("litr")
                        .HasColumnType("double precision");

                    b.Property<double?>("metr")
                        .HasColumnType("double precision");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<List<long>>("planning_type_id")
                        .HasColumnType("bigint[]");

                    b.Property<string>("print_name")
                        .HasColumnType("text");

                    b.Property<long?>("production_type_id")
                        .HasColumnType("bigint");

                    b.Property<List<long>>("selected_xarakteristika_ids")
                        .HasColumnType("bigint[]");

                    b.Property<long?>("unitmeasurment_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("unitmeasurment_id_2")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("production_type_id");

                    b.HasIndex("unitmeasurment_id");

                    b.HasIndex("unitmeasurment_id_2");

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_product");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexProductionType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_production_type");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexRealProductRemain", b =>
                {
                    b.Property<long?>("color_id")
                        .HasColumnType("bigint");

                    b.Property<string>("color_name")
                        .HasColumnType("text");

                    b.Property<string>("date_str")
                        .HasColumnType("text");

                    b.Property<long?>("extra_work_id")
                        .HasColumnType("bigint");

                    b.Property<string>("extra_work_name")
                        .HasColumnType("text");

                    b.Property<long?>("guscolor_id")
                        .HasColumnType("bigint");

                    b.Property<string>("guscolor_name")
                        .HasColumnType("text");

                    b.Property<long?>("invoice_item_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("main_proccess_id")
                        .HasColumnType("bigint");

                    b.Property<string>("main_proccess_name")
                        .HasColumnType("text");

                    b.Property<double?>("ostatka")
                        .HasColumnType("double precision");

                    b.Property<double?>("price")
                        .HasColumnType("double precision");

                    b.Property<long?>("product_id")
                        .HasColumnType("bigint");

                    b.Property<string>("product_name")
                        .HasColumnType("text");

                    b.Property<string>("real_product_name")
                        .HasColumnType("text");

                    b.Property<long?>("sort_id")
                        .HasColumnType("bigint");

                    b.Property<string>("sort_name")
                        .HasColumnType("text");

                    b.Property<long?>("suroviy_vid_id")
                        .HasColumnType("bigint");

                    b.Property<string>("suroviy_vid_name")
                        .HasColumnType("text");

                    b.Property<long?>("unitmeasurment_id")
                        .HasColumnType("bigint");

                    b.Property<string>("unitmeasurment_name")
                        .HasColumnType("text");

                    b.Property<long?>("upakovka_id")
                        .HasColumnType("bigint");

                    b.Property<string>("upakovka_name")
                        .HasColumnType("text");

                    b.ToTable("tex_real_product_remain");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexServiceType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_service_type");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexSize", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("tex_size");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexSklad", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("department_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("main_sklad_id")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("department_id");

                    b.HasIndex("main_sklad_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_sklad");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexSort", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_sort");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexStatus", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_status");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexSubProccess", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long?>("TexDeviceid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("TexDeviceid");

                    b.ToTable("tex_sub_proccess");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexSuroviyVid", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_suroviy_vid");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexTypeProduct", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("type_product");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexUnitmeasurment", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_unit_measurment");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexUpakovka", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_upakovka");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexUser", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("born_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("bot_id")
                        .HasColumnType("bigint");

                    b.Property<string>("cardnumber")
                        .HasColumnType("text");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("custom_user_number")
                        .HasColumnType("bigint");

                    b.Property<long>("department_id")
                        .HasColumnType("bigint");

                    b.Property<string>("fio")
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.Property<string>("passport_number")
                        .HasColumnType("text");

                    b.Property<string>("phone_number")
                        .HasColumnType("text");

                    b.Property<int>("pol_type")
                        .HasColumnType("integer");

                    b.Property<long?>("position_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("department_id");

                    b.HasIndex("passport_number")
                        .IsUnique();

                    b.HasIndex("position_id");

                    b.ToTable("tex_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexValyuta", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("difference")
                        .HasColumnType("double precision");

                    b.Property<double>("forbuy")
                        .HasColumnType("double precision");

                    b.Property<double>("forsale")
                        .HasColumnType("double precision");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<double>("nominal")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_valyuta");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexXarakteristika", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("print_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.ToTable("tex_xarakteristika");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexXarakteristikaTool", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("active_status")
                        .HasColumnType("boolean");

                    b.Property<long?>("created_auth_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("print_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("updated_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("xarakteristika_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("created_auth_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("updated_user_id");

                    b.HasIndex("xarakteristika_id");

                    b.ToTable("tex_xaraktersitika_tool");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizAgglyutinatsionTest", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizBakterioskopiya", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizCovid", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizCovidMazok", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizDemodex", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizKala", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizLeyshmaniy", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizLk", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizMachi", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizMikroskopiya", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizMuhimbelgilar", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizQondagiGarmonlar", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizQontahlili", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizRw", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizSarcoptes", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.AnalizZamburug", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.Authorization", b =>
                {
                    b.HasOne("ApiAll.Model.Company", "company")
                        .WithMany("authorizations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Users", "users")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");

                    b.Navigation("users");
                });

            modelBuilder.Entity("ApiAll.Model.Contragent", b =>
                {
                    b.HasOne("ApiAll.Model.Districts", "districts")
                        .WithMany()
                        .HasForeignKey("DistrictsId");

                    b.Navigation("districts");
                });

            modelBuilder.Entity("ApiAll.Model.ContragentAdditionalPaymentBefohand", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Contragent", "contragent")
                        .WithMany()
                        .HasForeignKey("ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authorization");

                    b.Navigation("contragent");
                });

            modelBuilder.Entity("ApiAll.Model.ContragentAdditionalPaymentBefohandDetail", b =>
                {
                    b.HasOne("ApiAll.Model.Contragent", "contragent")
                        .WithMany()
                        .HasForeignKey("ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.ServiceType", "serviceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contragent");

                    b.Navigation("patients");

                    b.Navigation("serviceType");
                });

            modelBuilder.Entity("ApiAll.Model.ContragentAdditionalPaymentBefohandFullInfo", b =>
                {
                    b.HasOne("ApiAll.Model.Contragent", "contragent")
                        .WithMany()
                        .HasForeignKey("ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contragent");
                });

            modelBuilder.Entity("ApiAll.Model.ContragentServiceTypeBonusAdditanaly", b =>
                {
                    b.HasOne("ApiAll.Model.Contragent", "contragent")
                        .WithMany()
                        .HasForeignKey("ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.ServiceType", "serviceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contragent");

                    b.Navigation("serviceType");
                });

            modelBuilder.Entity("ApiAll.Model.DatchikItem", b =>
                {
                    b.HasOne("ApiAll.Model.Color", "color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Datchik", "datchik")
                        .WithMany()
                        .HasForeignKey("DatchikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Rooms", "rooms")
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("color");

                    b.Navigation("datchik");

                    b.Navigation("rooms");
                });

            modelBuilder.Entity("ApiAll.Model.DatchikRealValues", b =>
                {
                    b.HasOne("ApiAll.Model.Rooms", "rooms")
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("rooms");
                });

            modelBuilder.Entity("ApiAll.Model.Department", b =>
                {
                    b.HasOne("ApiAll.Model.Company", "company")
                        .WithMany("departmentList")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");
                });

            modelBuilder.Entity("ApiAll.Model.Districts", b =>
                {
                    b.HasOne("ApiAll.Model.Province", "province")
                        .WithMany("districtList")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("province");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalContragentDebitPaymentReport", b =>
                {
                    b.HasOne("ApiAll.Model.Contragent", "contragent")
                        .WithMany()
                        .HasForeignKey("contragentId");

                    b.HasOne("ApiAll.Model.Districts", "districts")
                        .WithMany()
                        .HasForeignKey("districtsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contragent");

                    b.Navigation("districts");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalContragentNotifierReport", b =>
                {
                    b.HasOne("ApiAll.Model.Contragent", "contragent")
                        .WithMany()
                        .HasForeignKey("ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contragent");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalManagerReport", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authorization");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalMrtSorovNoma", b =>
                {
                    b.HasOne("ApiAll.Model.Contragent", "contragent")
                        .WithMany()
                        .HasForeignKey("ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contragent");

                    b.Navigation("patients");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalRegistrationPermissionDoctors", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "doctorAuth")
                        .WithMany()
                        .HasForeignKey("doctorAuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Authorization", "registraterAuth")
                        .WithMany()
                        .HasForeignKey("registraterAuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctorAuth");

                    b.Navigation("registraterAuth");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalServiceRecipe", b =>
                {
                    b.HasOne("ApiAll.Model.market.MarketProduct", "marketProduct")
                        .WithMany()
                        .HasForeignKey("MarketProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.ServiceType", "serviceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("marketProduct");

                    b.Navigation("serviceType");
                });

            modelBuilder.Entity("ApiAll.Model.HospitalServiceTypeByGroupPermission", b =>
                {
                    b.HasOne("ApiAll.Model.HospitalServiceTypeGroup", "ServiceTypeGroup")
                        .WithMany()
                        .HasForeignKey("HospitalServiceTypeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceTypeGroup");
                });

            modelBuilder.Entity("ApiAll.Model.HospitelRequiredServiceTypesAllPatcientsAndNotPatcients", b =>
                {
                    b.HasOne("ApiAll.Model.ServiceType", "serviceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("serviceType");
                });

            modelBuilder.Entity("ApiAll.Model.MarketPayments", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Company", "company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.market.MarketInvoiceItem", "invoiceItem")
                        .WithMany()
                        .HasForeignKey("MarketInvoiceItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.market.MarketOrderDetail", "orderDetail")
                        .WithMany()
                        .HasForeignKey("MarketOrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.market.MarketOrder", "marketOrder")
                        .WithMany()
                        .HasForeignKey("MarketOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.market.MarketProduct", "product")
                        .WithMany()
                        .HasForeignKey("MarketProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Users", "users")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authorization");

                    b.Navigation("company");

                    b.Navigation("Department");

                    b.Navigation("invoiceItem");

                    b.Navigation("marketOrder");

                    b.Navigation("orderDetail");

                    b.Navigation("product");

                    b.Navigation("users");
                });

            modelBuilder.Entity("ApiAll.Model.MarketPrePaidMoney", b =>
                {
                    b.HasOne("ApiAll.Model.Users", "users")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("ApiAll.Model.PatientRecipeByDoctor", b =>
                {
                    b.HasOne("ApiAll.Model.Users", "users")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("users");
                });

            modelBuilder.Entity("ApiAll.Model.PatientRegistrationInfo", b =>
                {
                    b.HasOne("ApiAll.Model.PatientServiceType", "patientServiceType")
                        .WithMany()
                        .HasForeignKey("PatientServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.PatientType", "patientType")
                        .WithMany()
                        .HasForeignKey("PatientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("patientServiceType");

                    b.Navigation("patientType");
                });

            modelBuilder.Entity("ApiAll.Model.Patients", b =>
                {
                    b.HasOne("ApiAll.Model.Districts", "districts")
                        .WithMany()
                        .HasForeignKey("DistrictsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("districts");
                });

            modelBuilder.Entity("ApiAll.Model.PaymentRooms", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Rooms", "rooms")
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("rooms");
                });

            modelBuilder.Entity("ApiAll.Model.PaymentRoomsItem", b =>
                {
                    b.HasOne("ApiAll.Model.PaymentRooms", null)
                        .WithMany("paymentRoomsItemsList")
                        .HasForeignKey("PaymentRoomsId");
                });

            modelBuilder.Entity("ApiAll.Model.PaymentRoomsServiceTypesItem", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.PaymentRooms", "paymentRooms")
                        .WithMany()
                        .HasForeignKey("PaymentRoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.ServiceType", "serviceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("paymentRooms");

                    b.Navigation("serviceType");
                });

            modelBuilder.Entity("ApiAll.Model.PaymentRoomsServiceTypesItemInfo", b =>
                {
                    b.HasOne("ApiAll.Model.PaymentRoomsServiceTypesItem", "paymentRoomsServiceTypesItem")
                        .WithMany("paymentRoomsServiceTypesItemInfoList")
                        .HasForeignKey("PaymentRoomsServiceTypesItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("paymentRoomsServiceTypesItem");
                });

            modelBuilder.Entity("ApiAll.Model.Payments", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Contragent", "contragent")
                        .WithMany()
                        .HasForeignKey("ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.ServiceType", "serviceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authorization");

                    b.Navigation("contragent");

                    b.Navigation("patients");

                    b.Navigation("serviceType");
                });

            modelBuilder.Entity("ApiAll.Model.ReturnMoney", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "Authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Users", "user")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authorization");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ApiAll.Model.RoomBooking", b =>
                {
                    b.HasOne("ApiAll.Model.Patients", "patients")
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Rooms", "rooms")
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("rooms");
                });

            modelBuilder.Entity("ApiAll.Model.Rooms", b =>
                {
                    b.HasOne("ApiAll.Model.Department", "department")
                        .WithMany("roomsList")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("ApiAll.Model.ServiceType", b =>
                {
                    b.HasOne("ApiAll.Model.HospitalServiceTypeGroup", "hospitalServiceTypeGroup")
                        .WithMany()
                        .HasForeignKey("HospitalServiceTypeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hospitalServiceTypeGroup");
                });

            modelBuilder.Entity("ApiAll.Model.ServiceTypeDetail", b =>
                {
                    b.HasOne("ApiAll.Model.ServiceType", "serviceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Users", "users")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("serviceType");

                    b.Navigation("users");
                });

            modelBuilder.Entity("ApiAll.Model.Users", b =>
                {
                    b.HasOne("ApiAll.Model.Position", "position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("ApiAll.Model.Department", "department")
                        .WithMany("userList")
                        .HasForeignKey("departmentId");

                    b.HasOne("ApiAll.Model.Rooms", "rooms")
                        .WithMany("userList")
                        .HasForeignKey("roomsId");

                    b.Navigation("department");

                    b.Navigation("position");

                    b.Navigation("rooms");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveAccessMenuItem", b =>
                {
                    b.HasOne("ApiAll.Model.archive.ArchiveAccessMenu", "accessMenu")
                        .WithMany("archiveAccessMenuItems")
                        .HasForeignKey("ArchiveAccessMenuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accessMenu");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveDepartment", b =>
                {
                    b.HasOne("ApiAll.Model.archive.ArchiveCompany", "company")
                        .WithMany()
                        .HasForeignKey("ArchiveCompanyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveRoomDetail", b =>
                {
                    b.HasOne("ApiAll.Model.archive.ArchiveDatchik", "datchik")
                        .WithMany()
                        .HasForeignKey("ArchiveDatchikid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.archive.ArchiveRoom", "room")
                        .WithMany("roomDetails")
                        .HasForeignKey("ArchiveRoomid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("datchik");

                    b.Navigation("room");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveUser", b =>
                {
                    b.HasOne("ApiAll.Model.archive.ArchiveDepartment", "department")
                        .WithMany()
                        .HasForeignKey("ArchiveDepartmentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketAuthLimitByMoney", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authorization");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketAuthLimitByMoneyDetail", b =>
                {
                    b.HasOne("ApiAll.Model.market.MarketAuthLimitByMoney", "LimitByMoney")
                        .WithMany("marketAuthLimitByMoneyDetails")
                        .HasForeignKey("MarketAuthLimitByMoneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.market.MarketOrder", "marketOrder")
                        .WithMany()
                        .HasForeignKey("MarketOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LimitByMoney");

                    b.Navigation("marketOrder");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketAuthLimitByProduct", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.market.MarketProduct", "product")
                        .WithMany()
                        .HasForeignKey("MarketProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authorization");

                    b.Navigation("product");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketAuthLimitByProductDetail", b =>
                {
                    b.HasOne("ApiAll.Model.market.MarketAuthLimitByProduct", "LimitByProduct")
                        .WithMany("marketAuthLimitByProductDetails")
                        .HasForeignKey("MarketAuthLimitByProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.market.MarketOrder", "marketOrder")
                        .WithMany()
                        .HasForeignKey("MarketOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LimitByProduct");

                    b.Navigation("marketOrder");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketClientInfo", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authorization");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketInvoice", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Company", "company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.market.MarketAgent", "agent")
                        .WithMany()
                        .HasForeignKey("MarketAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("agent");

                    b.Navigation("authorization");

                    b.Navigation("company");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketInvoiceItem", b =>
                {
                    b.HasOne("ApiAll.Model.market.MarketInvoice", null)
                        .WithMany("marketInvoiceItems")
                        .HasForeignKey("MarketInvoiceId");

                    b.HasOne("ApiAll.Model.market.MarketProduct", "product")
                        .WithMany()
                        .HasForeignKey("MarketProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketNeedToPayToAgentDetail", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.market.MarketNeedToPayToAgents", "NeedToPayToAgents")
                        .WithMany()
                        .HasForeignKey("MarketNeedToPayToAgentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authorization");

                    b.Navigation("NeedToPayToAgents");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketNeedToPayToAgents", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "createdUser")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.market.MarketAgent", "marketAgent")
                        .WithMany()
                        .HasForeignKey("MarketAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.market.MarketInvoice", "marketInvoice")
                        .WithMany("MarketNeedToPays")
                        .HasForeignKey("MarketInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("createdUser");

                    b.Navigation("marketAgent");

                    b.Navigation("marketInvoice");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketOrder", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authorization");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketOrderDeliveriedInfo", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.market.MarketOrder", "marketOrder")
                        .WithMany()
                        .HasForeignKey("MarketOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authorization");

                    b.Navigation("marketOrder");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketOrderDetail", b =>
                {
                    b.HasOne("ApiAll.Model.market.MarketOrder", "marketOrder")
                        .WithMany("marketOrderDetails")
                        .HasForeignKey("MarketOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.market.MarketProduct", "product")
                        .WithMany()
                        .HasForeignKey("MarketProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("marketOrder");

                    b.Navigation("product");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketProduct", b =>
                {
                    b.HasOne("ApiAll.Model.market.MarketUnitMeasurment", "marketUnitMeasurment")
                        .WithMany()
                        .HasForeignKey("MarketUnitMeasurmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("marketUnitMeasurment");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketProductGroup", b =>
                {
                    b.HasOne("ApiAll.Model.market.MarketProductGroup", "marketProductGroup")
                        .WithMany()
                        .HasForeignKey("marketProductGroupId");

                    b.Navigation("marketProductGroup");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketProductGroupDetail", b =>
                {
                    b.HasOne("ApiAll.Model.market.MarketProductGroup", "marketProductGroup")
                        .WithMany()
                        .HasForeignKey("MarketProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.market.MarketProduct", "product")
                        .WithMany()
                        .HasForeignKey("MarketProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("marketProductGroup");

                    b.Navigation("product");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketProductPrice", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId");

                    b.HasOne("ApiAll.Model.market.MarketProduct", "product")
                        .WithMany()
                        .HasForeignKey("MarketProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authorization");

                    b.Navigation("product");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketProductRealQty", b =>
                {
                    b.HasOne("ApiAll.Model.market.MarketProduct", "product")
                        .WithMany()
                        .HasForeignKey("MarketProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketProductRealQtyTemp", b =>
                {
                    b.HasOne("ApiAll.Model.market.MarketOrderDetail", "marketOrderDetail")
                        .WithMany()
                        .HasForeignKey("MarketOrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.market.MarketProduct", "product")
                        .WithMany()
                        .HasForeignKey("MarketProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("marketOrderDetail");

                    b.Navigation("product");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosAuthorization", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosCompany", "company")
                        .WithMany()
                        .HasForeignKey("company_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.pos.PosUser", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosCardDetail", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosClientCardType", "cardType")
                        .WithMany()
                        .HasForeignKey("card_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cardType");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosCheck", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosAuthorization", "auth")
                        .WithMany()
                        .HasForeignKey("PosAuthorizationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("auth");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosCosts", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosAuthorization", "auth")
                        .WithMany()
                        .HasForeignKey("PosAuthorizationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("auth");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosCreditor", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosInvoice", "invoice")
                        .WithMany()
                        .HasForeignKey("PosInvoiceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("invoice");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosCreditorItem", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosCreditor", "inv")
                        .WithMany("itemList")
                        .HasForeignKey("PosCreditorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("inv");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosDebitor", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosCompany", "client")
                        .WithMany()
                        .HasForeignKey("PosCompanyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosDebitorInvoice", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosAuthorization", "auth")
                        .WithMany()
                        .HasForeignKey("PosAuthorizationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.pos.PosDepartment", "department")
                        .WithMany()
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.pos.PosCompany", "postavshik")
                        .WithMany()
                        .HasForeignKey("postavshik_id");

                    b.HasOne("ApiAll.Model.pos.PosSklad", "sklad")
                        .WithMany()
                        .HasForeignKey("sklad_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("auth");

                    b.Navigation("department");

                    b.Navigation("postavshik");

                    b.Navigation("sklad");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosDebitorInvoiceItem", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosDebitorInvoice", "invoice")
                        .WithMany("itms")
                        .HasForeignKey("PosDebitorInvoiceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.pos.PosInvoiceItem", "item")
                        .WithMany()
                        .HasForeignKey("PosInvoiceItemid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.pos.PosProduct", "product")
                        .WithMany()
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("invoice");

                    b.Navigation("item");

                    b.Navigation("product");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosDebitorItem", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosAuthorization", "auth")
                        .WithMany()
                        .HasForeignKey("PosAuthorizationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.pos.PosDebitor", "inv")
                        .WithMany("itemList")
                        .HasForeignKey("PosDebitorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("auth");

                    b.Navigation("inv");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosDepartment", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosCompany", "company")
                        .WithMany()
                        .HasForeignKey("company_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.pos.PosDepartment", "department")
                        .WithMany()
                        .HasForeignKey("main_department_id");

                    b.Navigation("company");

                    b.Navigation("department");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosInvoice", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosDepartment", "department")
                        .WithMany()
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.pos.PosCompany", "postavshik")
                        .WithMany()
                        .HasForeignKey("postavshik_id");

                    b.HasOne("ApiAll.Model.pos.PosSklad", "sklad")
                        .WithMany()
                        .HasForeignKey("sklad_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");

                    b.Navigation("postavshik");

                    b.Navigation("sklad");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosInvoiceItem", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosInvoice", "invoice")
                        .WithMany("invoiceItems")
                        .HasForeignKey("PosInvoiceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.pos.PosProduct", "product")
                        .WithMany()
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("invoice");

                    b.Navigation("product");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosMessage", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosMessageGroup", "group")
                        .WithMany()
                        .HasForeignKey("groupid");

                    b.Navigation("group");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosPayments", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosCheck", "check")
                        .WithMany("paymentsList")
                        .HasForeignKey("PosCheckid");

                    b.HasOne("ApiAll.Model.pos.PosInvoiceItem", "item")
                        .WithMany()
                        .HasForeignKey("PosInvoiceItemid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.pos.PosProduct", "product")
                        .WithMany()
                        .HasForeignKey("productid");

                    b.Navigation("check");

                    b.Navigation("item");

                    b.Navigation("product");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosProduct", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosBrend", "brend")
                        .WithMany()
                        .HasForeignKey("brend_id");

                    b.HasOne("ApiAll.Model.pos.PosCategory", "category")
                        .WithMany()
                        .HasForeignKey("category_id");

                    b.HasOne("ApiAll.Model.pos.PosProduct", "mainPosProduct")
                        .WithMany()
                        .HasForeignKey("main_product_id");

                    b.HasOne("ApiAll.Model.pos.PosProductTag", "productTag")
                        .WithMany()
                        .HasForeignKey("product_tag_id");

                    b.HasOne("ApiAll.Model.pos.PosProductType", "type")
                        .WithMany()
                        .HasForeignKey("product_type_id");

                    b.HasOne("ApiAll.Model.pos.PosProductUnitMeasurment", "measurment")
                        .WithMany()
                        .HasForeignKey("unitmeasurment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("brend");

                    b.Navigation("category");

                    b.Navigation("mainPosProduct");

                    b.Navigation("measurment");

                    b.Navigation("productTag");

                    b.Navigation("type");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosProductCode", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosProduct", "product")
                        .WithMany()
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosProductPrice", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosProduct", "product")
                        .WithMany()
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosRecipe", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosProduct", "product")
                        .WithMany()
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.pos.PosProduct", "recipeProduct")
                        .WithMany()
                        .HasForeignKey("recipe_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("recipeProduct");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosRevert", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosCompany", "postavshik")
                        .WithMany()
                        .HasForeignKey("postavshik_id");

                    b.Navigation("postavshik");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosRevertItem", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosInvoiceItem", "invce_item")
                        .WithMany()
                        .HasForeignKey("PosInvoiceItemid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.pos.PosRevert", "revert")
                        .WithMany("items_list")
                        .HasForeignKey("PosRevertid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.pos.PosCheck", "check")
                        .WithMany()
                        .HasForeignKey("check_id");

                    b.HasOne("ApiAll.Model.pos.PosProduct", "product")
                        .WithMany()
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("check");

                    b.Navigation("invce_item");

                    b.Navigation("product");

                    b.Navigation("revert");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosSklad", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosDepartment", "department")
                        .WithMany()
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosSubDepartment", b =>
                {
                    b.HasOne("ApiAll.Model.pos.PosDepartment", "department")
                        .WithMany()
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("ApiAll.Model.settingsmodel.AccessMenu", b =>
                {
                    b.HasOne("ApiAll.Model.Authorization", "authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.settingsmodel.Menu", "menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authorization");

                    b.Navigation("menu");
                });

            modelBuilder.Entity("ApiAll.Model.settingsmodel.AccessMenuItem", b =>
                {
                    b.HasOne("ApiAll.Model.settingsmodel.AccessMenu", "accessMenu")
                        .WithMany()
                        .HasForeignKey("AccessMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.Authorization", "authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.settingsmodel.MenuItem", "menuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accessMenu");

                    b.Navigation("authorization");

                    b.Navigation("menuItem");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexAuthorization", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexContragent", "company")
                        .WithMany()
                        .HasForeignKey("company_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.tekistil.TexUser", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexBatch", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexColor", "color")
                        .WithMany()
                        .HasForeignKey("color_id");

                    b.HasOne("ApiAll.Model.tekistil.TexColorvariant", "colorvariant")
                        .WithMany()
                        .HasForeignKey("color_variant_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexDevice", "device")
                        .WithMany()
                        .HasForeignKey("device_id");

                    b.HasOne("ApiAll.Model.tekistil.TexGuscolor", "guscolor")
                        .WithMany()
                        .HasForeignKey("gus_color_id");

                    b.HasOne("ApiAll.Model.tekistil.TexOrderItem", "orderItem")
                        .WithMany()
                        .HasForeignKey("order_item_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("color");

                    b.Navigation("colorvariant");

                    b.Navigation("created_auth");

                    b.Navigation("device");

                    b.Navigation("guscolor");

                    b.Navigation("orderItem");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexBatchprocess", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexCalcType", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexCategory", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexMeasurmentType", "measurmentType")
                        .WithMany()
                        .HasForeignKey("measurment_type_id");

                    b.HasOne("ApiAll.Model.tekistil.TexTypeProduct", "typeProduct")
                        .WithMany()
                        .HasForeignKey("producttype_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("measurmentType");

                    b.Navigation("typeProduct");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexColor", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexColorGroup", "colorgroup")
                        .WithMany()
                        .HasForeignKey("color_group_id");

                    b.HasOne("ApiAll.Model.tekistil.TexContragent", "contragent")
                        .WithMany()
                        .HasForeignKey("contraget_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("colorgroup");

                    b.Navigation("contragent");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexColorGroup", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexColorVariantRecipe", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexColorproccess", "colorproccess")
                        .WithMany()
                        .HasForeignKey("color_proccess_id");

                    b.HasOne("ApiAll.Model.tekistil.TexColorvariant", "colorvariant")
                        .WithMany()
                        .HasForeignKey("color_variant_id");

                    b.HasOne("ApiAll.Model.tekistil.TexProduct", "product")
                        .WithMany()
                        .HasForeignKey("product_id");

                    b.HasOne("ApiAll.Model.tekistil.TexUnitmeasurment", "unitmeasurment")
                        .WithMany()
                        .HasForeignKey("unitmeasurment_id");

                    b.Navigation("colorproccess");

                    b.Navigation("colorvariant");

                    b.Navigation("product");

                    b.Navigation("unitmeasurment");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexColorVariantType", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexColorproccess", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexColorvariant", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexBatchprocess", "batchprocess")
                        .WithMany()
                        .HasForeignKey("batchprocess_id");

                    b.HasOne("ApiAll.Model.tekistil.TexColor", "texColor")
                        .WithMany()
                        .HasForeignKey("color_id");

                    b.HasOne("ApiAll.Model.tekistil.TexColorVariantType", "colorVariantType")
                        .WithMany()
                        .HasForeignKey("color_variant_type_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexGuscolor", "texGuscolor")
                        .WithMany()
                        .HasForeignKey("guscolor_id");

                    b.HasOne("ApiAll.Model.tekistil.TexColorvariant", "parent_colorvariant")
                        .WithMany()
                        .HasForeignKey("parent_colorvariant_id");

                    b.HasOne("ApiAll.Model.tekistil.TexProduct", "product")
                        .WithMany()
                        .HasForeignKey("product_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("batchprocess");

                    b.Navigation("colorVariantType");

                    b.Navigation("created_auth");

                    b.Navigation("parent_colorvariant");

                    b.Navigation("product");

                    b.Navigation("texColor");

                    b.Navigation("texGuscolor");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexColumnConfig", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "authorization")
                        .WithMany()
                        .HasForeignKey("authorizationid");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("authorization");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexDepartment", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexContragent", "contragent")
                        .WithMany()
                        .HasForeignKey("company_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexDepartment", "department")
                        .WithMany()
                        .HasForeignKey("main_department_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("contragent");

                    b.Navigation("created_auth");

                    b.Navigation("department");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexDevice", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexDepartment", "department")
                        .WithMany()
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.tekistil.TexDeviceType", "deviceType")
                        .WithMany()
                        .HasForeignKey("device_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("department");

                    b.Navigation("deviceType");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexDeviceSubProccessDetail", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexDevice", "texDevice")
                        .WithMany()
                        .HasForeignKey("TexDeviceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.tekistil.TexSubProccess", "subProccess")
                        .WithMany()
                        .HasForeignKey("TexSubProccessid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("subProccess");

                    b.Navigation("texDevice");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexDeviceType", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexExtrawork", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexGuscolor", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexInvoice", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexCalcType", "calcType")
                        .WithMany()
                        .HasForeignKey("calc_type_id");

                    b.HasOne("ApiAll.Model.tekistil.TexContragent", "contragent")
                        .WithMany()
                        .HasForeignKey("contraget_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexDepartment", "department")
                        .WithMany()
                        .HasForeignKey("department_id");

                    b.HasOne("ApiAll.Model.tekistil.TexContragent", "filial")
                        .WithMany()
                        .HasForeignKey("filial_id");

                    b.HasOne("ApiAll.Model.tekistil.TexInvoiceType", "invoiceType")
                        .WithMany()
                        .HasForeignKey("invoice_type_id");

                    b.HasOne("ApiAll.Model.tekistil.TexContragent", "maincompany")
                        .WithMany()
                        .HasForeignKey("main_company_id");

                    b.HasOne("ApiAll.Model.tekistil.TexDepartment", "maindepartment")
                        .WithMany()
                        .HasForeignKey("main_department_id");

                    b.HasOne("ApiAll.Model.tekistil.TexSklad", "mainSklad")
                        .WithMany()
                        .HasForeignKey("main_sklad_id");

                    b.HasOne("ApiAll.Model.tekistil.TexOrder", "order")
                        .WithMany()
                        .HasForeignKey("order_id");

                    b.HasOne("ApiAll.Model.tekistil.TexPaymentType", "paymentType")
                        .WithMany()
                        .HasForeignKey("payment_type_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "receved_auth")
                        .WithMany()
                        .HasForeignKey("receved_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexServiceType", "serviceType")
                        .WithMany()
                        .HasForeignKey("service_type_id");

                    b.HasOne("ApiAll.Model.tekistil.TexSklad", "sklad")
                        .WithMany()
                        .HasForeignKey("sklad_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_auth")
                        .WithMany()
                        .HasForeignKey("updated_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexValyuta", "valyuta")
                        .WithMany()
                        .HasForeignKey("valyuta_id");

                    b.Navigation("calcType");

                    b.Navigation("contragent");

                    b.Navigation("created_auth");

                    b.Navigation("department");

                    b.Navigation("filial");

                    b.Navigation("invoiceType");

                    b.Navigation("maincompany");

                    b.Navigation("maindepartment");

                    b.Navigation("mainSklad");

                    b.Navigation("order");

                    b.Navigation("paymentType");

                    b.Navigation("receved_auth");

                    b.Navigation("serviceType");

                    b.Navigation("sklad");

                    b.Navigation("updated_auth");

                    b.Navigation("valyuta");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexInvoiceItem", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexColor", "color")
                        .WithMany()
                        .HasForeignKey("color_id");

                    b.HasOne("ApiAll.Model.tekistil.TexColorvariant", "colorvariant")
                        .WithMany()
                        .HasForeignKey("color_variant_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexExtrawork", "extrawork")
                        .WithMany()
                        .HasForeignKey("extra_work_id");

                    b.HasOne("ApiAll.Model.tekistil.TexGuscolor", "guscolor")
                        .WithMany()
                        .HasForeignKey("gus_color_id");

                    b.HasOne("ApiAll.Model.tekistil.TexInvoice", "invoice")
                        .WithMany()
                        .HasForeignKey("invoice_id");

                    b.HasOne("ApiAll.Model.tekistil.TexInvoiceType", "invoiceType")
                        .WithMany()
                        .HasForeignKey("invoice_type_id");

                    b.HasOne("ApiAll.Model.tekistil.TexStatus", "status")
                        .WithMany()
                        .HasForeignKey("item_status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.tekistil.TexInvoiceItem", "mainInvoiceItem")
                        .WithMany()
                        .HasForeignKey("main_item_id");

                    b.HasOne("ApiAll.Model.tekistil.TexMainProccess", "mainProccess")
                        .WithMany()
                        .HasForeignKey("main_proccess_id");

                    b.HasOne("ApiAll.Model.tekistil.TexOrderItem", "orderItem")
                        .WithMany()
                        .HasForeignKey("order_item_id");

                    b.HasOne("ApiAll.Model.tekistil.TexProduct", "product")
                        .WithMany()
                        .HasForeignKey("product_id");

                    b.HasOne("ApiAll.Model.tekistil.TexSort", "sort")
                        .WithMany()
                        .HasForeignKey("sort_id");

                    b.HasOne("ApiAll.Model.tekistil.TexSuroviyVid", "suroviyVid")
                        .WithMany()
                        .HasForeignKey("suroviy_vid_id");

                    b.HasOne("ApiAll.Model.tekistil.TexUpakovka", "upakovka")
                        .WithMany()
                        .HasForeignKey("upakovka_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("color");

                    b.Navigation("colorvariant");

                    b.Navigation("created_auth");

                    b.Navigation("extrawork");

                    b.Navigation("guscolor");

                    b.Navigation("invoice");

                    b.Navigation("invoiceType");

                    b.Navigation("mainInvoiceItem");

                    b.Navigation("mainProccess");

                    b.Navigation("orderItem");

                    b.Navigation("product");

                    b.Navigation("sort");

                    b.Navigation("status");

                    b.Navigation("suroviyVid");

                    b.Navigation("upakovka");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexInvoiceType", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexLanguage", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "user_auth")
                        .WithMany()
                        .HasForeignKey("user_auth_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");

                    b.Navigation("user_auth");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexMainProccess", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexMeasurmentType", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexOrder", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexContragent", "client")
                        .WithMany()
                        .HasForeignKey("client_id");

                    b.HasOne("ApiAll.Model.tekistil.TexContragent", "company")
                        .WithMany()
                        .HasForeignKey("company_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexDepartment", "department")
                        .WithMany()
                        .HasForeignKey("department_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.HasOne("ApiAll.Model.tekistil.TexValyuta", "valyuta")
                        .WithMany()
                        .HasForeignKey("valuta_id");

                    b.Navigation("client");

                    b.Navigation("company");

                    b.Navigation("created_auth");

                    b.Navigation("department");

                    b.Navigation("updated_user");

                    b.Navigation("valyuta");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexOrderItem", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexColor", "color")
                        .WithMany()
                        .HasForeignKey("color_id");

                    b.HasOne("ApiAll.Model.tekistil.TexColorvariant", "colorvariant")
                        .WithMany()
                        .HasForeignKey("color_variant_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexExtrawork", "extrawork")
                        .WithMany()
                        .HasForeignKey("extra_work_id");

                    b.HasOne("ApiAll.Model.tekistil.TexGuscolor", "guscolor")
                        .WithMany()
                        .HasForeignKey("gus_color_id");

                    b.HasOne("ApiAll.Model.tekistil.TexOrderItem", "mainOrderItem")
                        .WithMany()
                        .HasForeignKey("main_order_item_id");

                    b.HasOne("ApiAll.Model.tekistil.TexMainProccess", "mainProccess")
                        .WithMany()
                        .HasForeignKey("main_proccess_id");

                    b.HasOne("ApiAll.Model.tekistil.TexOrder", "order")
                        .WithMany()
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.tekistil.TexProduct", "product")
                        .WithMany()
                        .HasForeignKey("product_id");

                    b.HasOne("ApiAll.Model.tekistil.TexProductionType", "productionType")
                        .WithMany()
                        .HasForeignKey("production_type_id");

                    b.HasOne("ApiAll.Model.tekistil.TexServiceType", "serviceType")
                        .WithMany()
                        .HasForeignKey("service_type_id");

                    b.HasOne("ApiAll.Model.tekistil.TexSize", "size")
                        .WithMany()
                        .HasForeignKey("size_id");

                    b.HasOne("ApiAll.Model.tekistil.TexSuroviyVid", "suroviyVid")
                        .WithMany()
                        .HasForeignKey("suroviy_vid_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("color");

                    b.Navigation("colorvariant");

                    b.Navigation("created_auth");

                    b.Navigation("extrawork");

                    b.Navigation("guscolor");

                    b.Navigation("mainOrderItem");

                    b.Navigation("mainProccess");

                    b.Navigation("order");

                    b.Navigation("product");

                    b.Navigation("productionType");

                    b.Navigation("serviceType");

                    b.Navigation("size");

                    b.Navigation("suroviyVid");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexOrderItemStepPermissions", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "authorization")
                        .WithMany()
                        .HasForeignKey("auth_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.tekistil.TexOrderItemSteps", "itemSteps")
                        .WithMany()
                        .HasForeignKey("order_steps_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authorization");

                    b.Navigation("itemSteps");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexOrderItemStepsDetail", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "authorization")
                        .WithMany()
                        .HasForeignKey("for_private_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexOrderItem", "orderItem")
                        .WithMany()
                        .HasForeignKey("order_item_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.tekistil.TexOrderItemSteps", "orderItemSteps")
                        .WithMany()
                        .HasForeignKey("order_item_steps_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authorization");

                    b.Navigation("orderItem");

                    b.Navigation("orderItemSteps");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexPaymentType", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexPlaningType", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexPosition", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexProduct", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexProductionType", "productionType")
                        .WithMany()
                        .HasForeignKey("production_type_id");

                    b.HasOne("ApiAll.Model.tekistil.TexUnitmeasurment", "unitmeasurment")
                        .WithMany()
                        .HasForeignKey("unitmeasurment_id");

                    b.HasOne("ApiAll.Model.tekistil.TexUnitmeasurment", "unitmeasurment_2")
                        .WithMany()
                        .HasForeignKey("unitmeasurment_id_2");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("productionType");

                    b.Navigation("unitmeasurment");

                    b.Navigation("unitmeasurment_2");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexProductionType", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexServiceType", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexSklad", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexDepartment", "department")
                        .WithMany()
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.tekistil.TexSklad", "sklad")
                        .WithMany()
                        .HasForeignKey("main_sklad_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("department");

                    b.Navigation("sklad");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexSort", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexStatus", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexSubProccess", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexDevice", null)
                        .WithMany("texSubProccessList")
                        .HasForeignKey("TexDeviceid");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexSuroviyVid", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexTypeProduct", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexUnitmeasurment", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexUpakovka", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexUser", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexDepartment", "department")
                        .WithMany()
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiAll.Model.tekistil.TexPosition", "position")
                        .WithMany()
                        .HasForeignKey("position_id");

                    b.Navigation("department");

                    b.Navigation("position");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexValyuta", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexXarakteristika", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexXarakteristikaTool", b =>
                {
                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "created_auth")
                        .WithMany()
                        .HasForeignKey("created_auth_id");

                    b.HasOne("ApiAll.Model.tekistil.TexAuthorization", "updated_user")
                        .WithMany()
                        .HasForeignKey("updated_user_id");

                    b.HasOne("ApiAll.Model.tekistil.TexXarakteristika", "xarakteristika")
                        .WithMany()
                        .HasForeignKey("xarakteristika_id");

                    b.Navigation("created_auth");

                    b.Navigation("updated_user");

                    b.Navigation("xarakteristika");
                });

            modelBuilder.Entity("ApiAll.Model.Company", b =>
                {
                    b.Navigation("authorizations");

                    b.Navigation("departmentList");
                });

            modelBuilder.Entity("ApiAll.Model.Department", b =>
                {
                    b.Navigation("roomsList");

                    b.Navigation("userList");
                });

            modelBuilder.Entity("ApiAll.Model.PaymentRooms", b =>
                {
                    b.Navigation("paymentRoomsItemsList");
                });

            modelBuilder.Entity("ApiAll.Model.PaymentRoomsServiceTypesItem", b =>
                {
                    b.Navigation("paymentRoomsServiceTypesItemInfoList");
                });

            modelBuilder.Entity("ApiAll.Model.Province", b =>
                {
                    b.Navigation("districtList");
                });

            modelBuilder.Entity("ApiAll.Model.Rooms", b =>
                {
                    b.Navigation("userList");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveAccessMenu", b =>
                {
                    b.Navigation("archiveAccessMenuItems");
                });

            modelBuilder.Entity("ApiAll.Model.archive.ArchiveRoom", b =>
                {
                    b.Navigation("roomDetails");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketAuthLimitByMoney", b =>
                {
                    b.Navigation("marketAuthLimitByMoneyDetails");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketAuthLimitByProduct", b =>
                {
                    b.Navigation("marketAuthLimitByProductDetails");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketInvoice", b =>
                {
                    b.Navigation("marketInvoiceItems");

                    b.Navigation("MarketNeedToPays");
                });

            modelBuilder.Entity("ApiAll.Model.market.MarketOrder", b =>
                {
                    b.Navigation("marketOrderDetails");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosCheck", b =>
                {
                    b.Navigation("paymentsList");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosCreditor", b =>
                {
                    b.Navigation("itemList");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosDebitor", b =>
                {
                    b.Navigation("itemList");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosDebitorInvoice", b =>
                {
                    b.Navigation("itms");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosInvoice", b =>
                {
                    b.Navigation("invoiceItems");
                });

            modelBuilder.Entity("ApiAll.Model.pos.PosRevert", b =>
                {
                    b.Navigation("items_list");
                });

            modelBuilder.Entity("ApiAll.Model.tekistil.TexDevice", b =>
                {
                    b.Navigation("texSubProccessList");
                });
#pragma warning restore 612, 618
        }
    }
}
